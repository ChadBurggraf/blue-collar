<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tasty</name>
    </assembly>
    <members>
        <member name="T:Tasty.Build.Email">
            <summary>
            Extends <see cref="T:Microsoft.Build.Utilities.Task"/> to send emails.
            </summary>
        </member>
        <member name="M:Tasty.Build.Email.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns>True if the task executed successfully, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Build.Email.Attachments">
            <summary>
            Gets or sets a collection of file paths to attach to the email.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.Bcc">
            <summary>
            Gets or sets a collection of addresses to BCC on the email.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.Body">
            <summary>
            Gets or sets the email's body.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.CC">
            <summary>
            Gets or sets a collection of addresses to CC on the email.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.From">
            <summary>
            Gets or sets the address to send the email from.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.FromName">
            <summary>
            Gets or sets the display name to use as the sender.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.IsHtml">
            <summary>
            Gets or sets a value indicating whether the email body is HTML.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.Password">
            <summary>
            Gets or sets the password to use when connecting to the server.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.Port">
            <summary>
            Gets or sets the port number to connect to the server on.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.SentEmails">
            <summary>
            Gets or sets the collection of email address that were sent emails upon completion.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.SmtpServer">
            <summary>
            Gets or sets the IP address or host name of the SMTP server to use.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.Subject">
            <summary>
            Gets or sets the email subject.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.To">
            <summary>
            Gets or sets the collection of destination email addresses.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.UserName">
            <summary>
            Gets or sets the username to use when authenticating with the mail server.
            </summary>
        </member>
        <member name="P:Tasty.Build.Email.UseSsl">
            <summary>
            Gets or sets a value indicating whether to use SSL when connecting to the mail server.
            </summary>
        </member>
        <member name="T:Tasty.Build.Extensions">
            <summary>
            <see cref="N:Tasty.Build"/> extension methods.
            </summary>
        </member>
        <member name="F:Tasty.Build.Extensions.AssemblyFileVersionPattern">
            <summary>
            Gets the regular expression pattern used for matching AssemblyFileVersion attributes in AssemblyInfo files.
            </summary>
        </member>
        <member name="F:Tasty.Build.Extensions.AssemblyVersionPattern">
            <summary>
            Gets the regular expression pattern used for matching AssemblyVersion attributes in AssemblyInfo files.
            </summary>
        </member>
        <member name="M:Tasty.Build.Extensions.SplitConnectionString(System.String)">
            <summary>
            Splits a database connection string into a collection of key/value pairs.
            The resulting keys are all normalized to lower-case.
            </summary>
            <param name="connectionString">The connection string to split.</param>
            <returns>The connection string as a collection of key/value pairs.</returns>
        </member>
        <member name="M:Tasty.Build.Extensions.SplitSqlCommands(System.String)">
            <summary>
            Splits a string of SQL commands on "GO" to enable issuing them
            individually using ADO.
            </summary>
            <param name="sql">The SQL command set to split.</param>
            <returns>A collection of SQL commands.</returns>
        </member>
        <member name="M:Tasty.Build.Extensions.ToConnectionString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets the given collection as a database connection string (key/values paired with '=' and separated by ';').
            </summary>
            <param name="collection">The connection string collection to convert.</param>
            <returns>A connection string.</returns>
        </member>
        <member name="T:Tasty.Build.GetVersion">
            <summary>
            Extends <see cref="T:Microsoft.Build.Utilities.Task"/> to get version information from an assembly or AssemblyInfo.cs file.
            </summary>
        </member>
        <member name="M:Tasty.Build.GetVersion.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns>True if the task executed successfully, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Build.GetVersion.AssemblyFile">
            <summary>
            Gets or sets the path to the assembly DLL to pull version information from.
            </summary>
        </member>
        <member name="P:Tasty.Build.GetVersion.AssemblyInfoFile">
            <summary>
            Gets or sets the path of the AssemblyInfo.cs file to pull version information from.
            </summary>
        </member>
        <member name="P:Tasty.Build.GetVersion.Build">
            <summary>
            Gets the version's build number.
            </summary>
        </member>
        <member name="P:Tasty.Build.GetVersion.Major">
            <summary>
            Gets the version's major number.
            </summary>
        </member>
        <member name="P:Tasty.Build.GetVersion.Minor">
            <summary>
            Gets the version's minor number.
            </summary>
        </member>
        <member name="P:Tasty.Build.GetVersion.Revision">
            <summary>
            Gets the version's revision number.
            </summary>
        </member>
        <member name="T:Tasty.Build.S3Exists">
            <summary>
            Base class for S3-exists related <see cref="T:Microsoft.Build.Utilities.Task"/>s.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Exists.AccessKeyId">
            <summary>
            Gets or sets the Amazon S3 access key ID to use when connecting to the service.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Exists.BucketName">
            <summary>
            Gets or sets the name of the bucket to publish assets to.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Exists.Exists">
            <summary>
            Gets or sets a value indicating whether the item exists.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Exists.SecretAccessKeyId">
            <summary>
            Gets or sets the Amazon S3 secret access key ID to use when connecting to the service.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Exists.UseSsl">
            <summary>
            Gets or sets a value indicating whether to use SSL when connecting to the service.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Exists.Client">
            <summary>
            Gets the client to use when connecting to the service.
            </summary>
        </member>
        <member name="T:Tasty.Build.S3KeyExists">
            <summary>
            Checks for the existence of an object key in an Amazon S3 bucket.
            </summary>
        </member>
        <member name="M:Tasty.Build.S3KeyExists.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns>True if the task executed successfully, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Build.S3KeyExists.Key">
            <summary>
            Gets or sets the object key to check for the existstence of.
            </summary>
        </member>
        <member name="T:Tasty.Build.S3PrefixExists">
            <summary>
            Checks for the existence of a key prefix in an Amazon S3 bucket.
            </summary>
        </member>
        <member name="M:Tasty.Build.S3PrefixExists.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns>True if the task executed successfully, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Build.S3PrefixExists.Prefix">
            <summary>
            Gets or sets the key prefix to check for the existstence of.
            </summary>
        </member>
        <member name="T:Tasty.Collections">
            <summary>
            Provides extensions and helpers on collections.
            </summary>
        </member>
        <member name="M:Tasty.Collections.Covariance``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Computes the covariance of the collection with the given comparison collection.
            </summary>
            <typeparam name="T">The collection's item type.</typeparam>
            <typeparam name="U">The comparison collection's item type.</typeparam>
            <param name="values">The collection to compute the covariance of.</param>
            <param name="comparison">The comparison collection to compute the covariance of.</param>
            <returns>The covariance of the collection with the comparison collection.</returns>
        </member>
        <member name="M:Tasty.Collections.Covariance``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Double@)">
            <summary>
            Computes the covariance of the collection with the given comparison collection.
            </summary>
            <typeparam name="T">The collection's item type.</typeparam>
            <typeparam name="U">The comparison collection's item type.</typeparam>
            <param name="values">The collection to compute the covariance of.</param>
            <param name="comparison">The comparison collection to compute the covariance of.</param>
            <param name="pearson">Contains the pearson value once the calculation is complete.</param>
            <returns>The covariance of the collection with the comparison collection.</returns>
        </member>
        <member name="M:Tasty.Collections.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes the standard deviation of the values in the collection.
            </summary>
            <typeparam name="T">The collection's item type.</typeparam>
            <param name="values">The collection of values to compute the standard deviation of.</param>
            <returns>The standard deviation.</returns>
        </member>
        <member name="M:Tasty.Collections.Variance``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes the variance of the values in the collection.
            </summary>
            <typeparam name="T">The collection's item type.</typeparam>
            <param name="values">The collection of values to compute the variance of.</param>
            <returns>The variance.</returns>
        </member>
        <member name="T:Tasty.Configuration.GitHubElement">
            <summary>
            Represents the GitHub element in the configuration.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.GitHubElement.IsReadOnly">
            <summary>
            Gets a value indicating if the System.Configuration.ConfigurationElement object is read-only.
            </summary>
            <returns>True if the System.Configuration.ConfigurationElement object is read-only, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Configuration.GitHubElement.Webhooks">
            <summary>
            Gets the webhook collection.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.WebhookElement">
            <summary>
            Represents a GitHub webhook element in the configuration.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.WebhookElement.IsReadOnly">
            <summary>
            Gets a value indicating if the System.Configuration.ConfigurationElement object is read-only.
            </summary>
            <returns>True if the System.Configuration.ConfigurationElement object is read-only, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Configuration.WebhookElement.ProjectFile">
            <summary>
            Gets or sets the path of the MSBuild project file to execute when a webhook is received.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.WebhookElement.RefFilter">
            <summary>
            Gets or sets a regular expression that can be used to filter on the <see cref="P:Tasty.GitHub.GitHubWebhook.Ref"/> value.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.WebhookElement.Repository">
            <summary>
            Gets or sets the name of the repository the element is targeting.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.WebhookElement.Targets">
            <summary>
            Gets or sets a semi-colon-delimited list of targets to call in the project file.
            Leave empty to call the default target.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.WebhookElementCollection">
            <summary>
            Represents a collection of <see cref="T:Tasty.Configuration.WebhookElement"/>s in the configuration.
            </summary>
        </member>
        <member name="T:Tasty.ConfigurationElementCollection`1">
            <summary>
            Represents the base class for <see cref="T:System.Configuration.ConfigurationElementCollection"/> implementors.
            </summary>
            <typeparam name="T">The type of the configuration elements contained in the collection.</typeparam>
        </member>
        <member name="M:Tasty.ConfigurationElementCollection`1.Add(`0)">
            <summary>
            Adds a new item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Tasty.ConfigurationElementCollection`1.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Tasty.ConfigurationElementCollection`1.Contains(`0)">
            <summary>
            Gets a value indicating whether the collection contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the collection contains the item, false otherwise.</returns>
        </member>
        <member name="M:Tasty.ConfigurationElementCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator that can be used to enumerate over the collection.
            </summary>
            <returns>The collection's enumerator.</returns>
        </member>
        <member name="M:Tasty.ConfigurationElementCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to the given array, starting at the given index in the array.
            </summary>
            <param name="array">The array to copy elements to.</param>
            <param name="arrayIndex">The index in the array to start copying at.</param>
        </member>
        <member name="M:Tasty.ConfigurationElementCollection`1.Remove(`0)">
            <summary>
            Removes the given item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was found and removed, false otherwise.</returns>
        </member>
        <member name="M:Tasty.ConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new instance of the collection's contained <see cref="T:System.Configuration.ConfigurationElement"/> type.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/> instance.</returns>
        </member>
        <member name="P:Tasty.ConfigurationElementCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the colleciton is read only.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.WebhookElementCollection.Contains(Tasty.Configuration.WebhookElement)">
            <summary>
            Gets a value indicating whether the collection contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the collection contains the item, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Configuration.WebhookElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the unique key of the given element.
            </summary>
            <param name="element">The element to get the key of.</param>
            <returns>The given element's key.</returns>
        </member>
        <member name="P:Tasty.Configuration.WebhookElementCollection.StifleExceptions">
            <summary>
            Gets or sets a value indicating whether to stifle all exceptions. Useful for preventing
            leakage of any sensitive information.
            </summary>
        </member>
        <member name="T:Tasty.Emailer">
            <summary>
            Sends emails based on <see cref="T:Tasty.MailModel"/>s and <see cref="T:Tasty.MailTemplate"/>s.
            </summary>
        </member>
        <member name="M:Tasty.Emailer.#ctor(Tasty.MailTemplate)">
            <summary>
            Initializes a new instance of the Emailer class.
            </summary>
            <param name="template">The <see cref="T:Tasty.MailTemplate"/> to use when processing the email(s).</param>
        </member>
        <member name="M:Tasty.Emailer.Send(Tasty.MailModel)">
            <summary>
            Sends the email(s) current configured by this instance.
            </summary>
            <param name="model">The model to use when sending email.
            WARNING: The model's <see cref="P:Tasty.MailModel.Email"/> property will be set for each recipient.</param>
        </member>
        <member name="M:Tasty.Emailer.SendAsync(Tasty.MailModel)">
            <summary>
            Sends the email(s) current configured by this instance.
            WARNING: A giant assumption is made that changes to the <see cref="P:Tasty.Emailer.To"/> collection will not be made
            while this call is in progress, as well as that no other calls to <see cref="M:Tasty.Emailer.Send(Tasty.MailModel)"/>
            or <see cref="M:Tasty.Emailer.SendAsync(Tasty.MailModel)"/> are made on this instance while this call is in progress.
            </summary>
            <param name="model">The model to use when sending email.
            WARNING: The model's <see cref="P:Tasty.MailModel.Email"/> property will be set for each recipient.</param>
        </member>
        <member name="M:Tasty.Emailer.InitializeFromConfiguration">
            <summary>
            Initializes this instance's state from anything found in the configuration.
            </summary>
        </member>
        <member name="M:Tasty.Emailer.ClientSendCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises an <see cref="T:System.Net.Mail.SmtpClient"/>'s SendCompleted event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Tasty.Emailer.CreateClient">
            <summary>
            Creates a new <see cref="T:System.Net.Mail.SmtpClient"/> from this instance's state.
            </summary>
            <returns>The created <see cref="T:System.Net.Mail.SmtpClient"/>.</returns>
        </member>
        <member name="M:Tasty.Emailer.CreateMessage">
            <summary>
            Creates a new <see cref="T:System.Net.Mail.MailMessage"/> object from this instance's state.
            </summary>
            <returns>The created <see cref="T:System.Net.Mail.MailMessage"/>.</returns>
        </member>
        <member name="M:Tasty.Emailer.Validate">
            <summary>
            Validates this instance's state before sending.
            </summary>
        </member>
        <member name="E:Tasty.Emailer.AllSent">
            <summary>
            Event raised when emails have been sent to all of the addresses in the <see cref="P:Tasty.Emailer.To"/> collection.
            </summary>
        </member>
        <member name="E:Tasty.Emailer.Sent">
            <summary>
            Event raised when an email is sent to a single destination address.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.Attachments">
            <summary>
            Gets the collection of file paths to attach to emails.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.Bcc">
            <summary>
            Gets the collection of addresses to BCC on emails.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.CC">
            <summary>
            Gets the collection of addresses to CC on emails.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.From">
            <summary>
            Gets or sets the email address of the email sender.
            Defaults to value found in <mailSettings/> if not set.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.FromDisplayName">
            <summary>
            Gets or sets the display name of the email sender.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.Password">
            <summary>
            Gets or sets the password to use when connecting to the server.
            Defaults to value found in <mailSettings/> if not set.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.Port">
            <summary>
            Gets or sets the port to connect to the server on.
            Defaults to value found in <mailSettings/> if not set.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.SmtpServer">
            <summary>
            Gets or sets the IP address or host name of the SMTP server.
            Defaults to value found in <mailSettings/> if not set.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.Subject">
            <summary>
            Gets or sets the email subject.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.To">
            <summary>
            Gets the collection of destination addresses to send to.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.UserName">
            <summary>
            Gets or sets the username to use when authenticating with the server.
            Defaults to value found in <mailSettings/> if not set.
            </summary>
        </member>
        <member name="P:Tasty.Emailer.UseSsl">
            <summary>
            Gets or sets a value indicating whether to use SSL when connecting to the server.
            </summary>
        </member>
        <member name="T:Tasty.EmailSentEventArgs">
            <summary>
            Event arguments for <see cref="E:Tasty.Emailer.Sent"/> events.
            </summary>
        </member>
        <member name="M:Tasty.EmailSentEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EmailSentEventArgs class.
            </summary>
            <param name="to">The destination address of the email.</param>
        </member>
        <member name="P:Tasty.EmailSentEventArgs.To">
            <summary>
            Gets the destination address of the email.
            </summary>
        </member>
        <member name="T:Tasty.EmptyMailModel">
            <summary>
            Represents an empty implementation of <see cref="T:Tasty.MailModel"/>.
            </summary>
        </member>
        <member name="T:Tasty.MailModel">
            <summary>
            Represents the base class for templated email models.
            </summary>
        </member>
        <member name="F:Tasty.MailModel.XmlNamespace">
            <summary>
            Gets the XML namespace used during mail model serialization.
            </summary>
        </member>
        <member name="M:Tasty.MailModel.ToXml">
            <summary>
            Serializes this instance to XML.
            </summary>
            <returns>The serialized XML.</returns>
        </member>
        <member name="P:Tasty.MailModel.Email">
            <summary>
            Gets or sets the destination address of the email being modeled.
            </summary>
        </member>
        <member name="P:Tasty.MailModel.Today">
            <summary>
            Gets or sets the current date.
            </summary>
        </member>
        <member name="M:Tasty.EmptyMailModel.#ctor">
            <summary>
            Initializes a new instance of the EmptyMailModel class.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeSubAdministrativeArea">
            <summary>
            Represetns a sub-administrative area in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeSubAdministrativeArea.SubAdministrativeAreaName">
            <summary>
            Gets or sets the name of the sub-adminsitrative area.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeSubAdministrativeArea.Locality">
            <summary>
            Gets or sets the locality of the sub-administrative area.
            </summary>
        </member>
        <member name="T:Tasty.GitHub.GitHubWebhookHandler">
            <summary>
            Implements <see cref="T:System.Web.IHttpHandler"/> to receive GitHub post-receive hooks.
            </summary>
        </member>
        <member name="F:Tasty.GitHub.GitHubWebhookHandler.PayloadParameterName">
            <summary>
            Gets the name of the POST payload parameter.
            </summary>
        </member>
        <member name="M:Tasty.GitHub.GitHubWebhookHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the IHttpHandler instance.
            </summary>
        </member>
        <member name="T:Tasty.GitHub.GitHubWebhookMSBuildExecuter">
            <summary>
            Executes an MSBuild project with properties and items injected from a <see cref="T:Tasty.GitHub.GitHubWebhook"/>.
            </summary>
        </member>
        <member name="M:Tasty.GitHub.GitHubWebhookMSBuildExecuter.#ctor(System.String,Tasty.GitHub.GitHubWebhook)">
            <summary>
            Initializes a new instance of the GitHubWebhookMSBuildExecuter class.
            </summary>
            <param name="projectFile">The path to the MSBuild project file to execute.</param>
            <param name="hook">The <see cref="T:Tasty.GitHub.GitHubWebhook"/> to inject properties and items from.</param>
        </member>
        <member name="M:Tasty.GitHub.GitHubWebhookMSBuildExecuter.PrepareProject(Microsoft.Build.BuildEngine.Project,Tasty.GitHub.GitHubWebhook)">
            <summary>
            Prepares the given MSBuild <see cref="T:Microsoft.Build.BuildEngine.Project"/> with properties and items from the given <see cref="T:Tasty.GitHub.GitHubWebhook"/>.
            </summary>
            <param name="project">The project to prepare.</param>
            <param name="hook">The webhook to prepare the project with.</param>
        </member>
        <member name="M:Tasty.GitHub.GitHubWebhookMSBuildExecuter.Execute">
            <summary>
            Executes this instance's MSBuild project file.
            </summary>
            <returns>True if the project executed successfully, false otherwise.</returns>
        </member>
        <member name="M:Tasty.GitHub.GitHubWebhookMSBuildExecuter.SetTargets(System.String)">
            <summary>
            Sets the <see cref="P:Tasty.GitHub.GitHubWebhookMSBuildExecuter.Targets"/> collection from the given semi-colon-delimited string.
            </summary>
            <param name="targets">A string of targets.</param>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookMSBuildExecuter.Hook">
            <summary>
            Gets the <see cref="T:Tasty.GitHub.GitHubWebhook"/> properties and items are being injected from.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookMSBuildExecuter.LogFile">
            <summary>
            Gets or sets the path to log MSBuild output to, if desired.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookMSBuildExecuter.ProjectFile">
            <summary>
            Gets the path of the MSBuild project file being executed.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookMSBuildExecuter.Targets">
            <summary>
            Gets the collection of targets to call when executing the project.
            </summary>
        </member>
        <member name="T:Tasty.Build.IS3PublisherDelegate">
            <summary>
            Delegate for notifications during an <see cref="T:Tasty.Build.S3Publisher"/> publish process.
            </summary>
        </member>
        <member name="M:Tasty.Build.IS3PublisherDelegate.OnFilePublished(System.String,System.String,System.Boolean)">
            <summary>
            Called when a file has been successfully published to Amazon S3.
            </summary>
            <param name="path">The path of the file that was published.</param>
            <param name="objectKey">The resulting object key of the file on Amazon S3.</param>
            <param name="withGzip">A value indicating whether the file was compressed with GZip before publishing.</param>
        </member>
        <member name="M:Tasty.Build.IS3PublisherDelegate.OnFileSkipped(System.String,System.String)">
            <summary>
            Called when a file is skipped for publishing because it already exists.
            </summary>
            <param name="path">The path of the file that was skipped.</param>
            <param name="objectKey">The object key of the file on the service.</param>
        </member>
        <member name="M:Tasty.Build.IS3PublisherDelegate.OnPrefixSkipped(System.String)">
            <summary>
            Called when an entire prefix is skipped for publishing because it already exists.
            </summary>
            <param name="prefix">The prefix that was skipped.</param>
        </member>
        <member name="T:Tasty.Build.ISchemaUpgradeDelegate">
            <summary>
            Delegate for providing meta-data information about a database being upgraded
            with a <see cref="T:Tasty.Build.SchemaUpgradeService"/> process.
            </summary>
        </member>
        <member name="M:Tasty.Build.ISchemaUpgradeDelegate.GetCommandSet(System.Version)">
            <summary>
            Gets a string of SQL commands that represent a single step
            in the upgrade process. The SQL should represent the upgrade
            to the given version from the version immediately preceding it.
            </summary>
            <param name="forVersion">The version to get the upgrade commands for.</param>
            <returns>A string of SQL commands.</returns>
        </member>
        <member name="M:Tasty.Build.ISchemaUpgradeDelegate.GetCurrentVersion">
            <summary>
            Gets the current version the target database is at.
            </summary>
            <returns>The target database's current version.</returns>
        </member>
        <member name="M:Tasty.Build.ISchemaUpgradeDelegate.GetTargetVersion">
            <summary>
            Gets the version to upgrade the target database to.
            </summary>
            <returns>The target database's destination version.</returns>
        </member>
        <member name="M:Tasty.Build.ISchemaUpgradeDelegate.GetUpgradePath(System.Version,System.Version)">
            <summary>
            Gets a collection of individual version steps that represent the path
            for upgrading the target database from one version to another.
            </summary>
            <param name="currentVersion">The version the database is being upgraded from.</param>
            <param name="targetVersion">The version the database is being upgraded to.</param>
            <returns>A collection of versions.</returns>
        </member>
        <member name="M:Tasty.Build.ISchemaUpgradeDelegate.MarkAsUpgraded(System.Version)">
            <summary>
            Marks the target database as successfully upgraded for the given version.
            This method is called after each discreet upgrade step is performed successfully.
            </summary>
            <param name="forVersion">The version to mark the database for.</param>
        </member>
        <member name="T:Tasty.Build.S3Publisher">
            <summary>
            Publishes static assets to an Amazon S3 bucket.
            Compresses files with text-based content types (*.css, *.js, etc.)
            and publishes them with a gzip content encoding.
            </summary>
        </member>
        <member name="M:Tasty.Build.S3Publisher.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the S3Publisher class.
            </summary>
            <param name="accessKeyId">The Amazon S3 access key ID to use when connecting to the service.</param>
            <param name="secretAccessKeyId">The Amazon S3 secret access key ID to use when connecting to the service.</param>
        </member>
        <member name="M:Tasty.Build.S3Publisher.OnFilePublished(System.String,System.String,System.Boolean)">
            <summary>
            Called when a file has been successfully published to Amazon S3.
            </summary>
            <param name="path">The path of the file that was published.</param>
            <param name="objectKey">The resulting object key of the file on Amazon S3.</param>
            <param name="withGzip">A value indicating whether the file was compressed with GZip before publishing.</param>
        </member>
        <member name="M:Tasty.Build.S3Publisher.OnFileSkipped(System.String,System.String)">
            <summary>
            Called when a file is skipped for publishing because it already exists.
            </summary>
            <param name="path">The path of the file that was skipped.</param>
            <param name="objectKey">The object key of the file on the service.</param>
        </member>
        <member name="M:Tasty.Build.S3Publisher.OnPrefixSkipped(System.String)">
            <summary>
            Called when an entire prefix is skipped for publishing because it already exists.
            </summary>
            <param name="prefix">The prefix that was skipped.</param>
        </member>
        <member name="M:Tasty.Build.S3Publisher.Publish">
            <summary>
            Publishes the currently-identified file set to Amazon S3.
            </summary>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithBasePath(System.String)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.BasePath"/> and returns this instance.
            </summary>
            <param name="basePath">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithBucketName(System.String)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.BucketName"/> and returns this instance.
            </summary>
            <param name="bucketName">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Clears the <see cref="P:Tasty.Build.S3Publisher.Files"/> collection and then fills it with the given collection and returns this instance.
            </summary>
            <param name="files">The new file collection.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithOverwriteExisting(System.Boolean)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.OverwriteExisting"/> and returns this instance.
            </summary>
            <param name="overwriteExisting">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithOverwriteExistingPrefix(System.Boolean)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.OverwriteExistingPrefix"/> and returns this instance.
            </summary>
            <param name="overwriteExistingPrefix">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithPrefix(System.String)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.Prefix"/> and returns this instance.
            </summary>
            <param name="prefix">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithPublisherDelegate(Tasty.Build.IS3PublisherDelegate)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.PublisherDelegate"/> and returns this instance.
            </summary>
            <param name="publisherDelegate">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithTimeout(System.Int32)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.Timeout"/> and returns this instance.
            </summary>
            <param name="timeout">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithUseSsl(System.Boolean)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.UseSsl"/> and returns this instance.
            </summary>
            <param name="useSsl">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.Client">
            <summary>
            Gets a <see cref="T:Amazon.S3.AmazonS3"/> client base on this instance's current state.
            </summary>
            <returns>An <see cref="T:Amazon.S3.AmazonS3"/> client.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.ObjectExists(System.String)">
            <summary>
            Gets a value indicating whether the object with the given key exists on the service.
            </summary>
            <param name="key">The key to check the existence of.</param>
            <returns>True if the object exists, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.ObjectKey(System.String)">
            <summary>
            Gets the object key to use for the file at the given path.
            </summary>
            <param name="filePath">The file path to get the object key for.</param>
            <returns>The file's object key.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.PrefixExists">
            <summary>
            Gets a value indicating whether this instance's prefix exists.
            </summary>
            <returns>True if the prefix exists, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.PublishFile(System.String)">
            <summary>
            Publishes a file to Amazon S3.
            </summary>
            <param name="filePath">The path of the file to publish.</param>
        </member>
        <member name="P:Tasty.Build.S3Publisher.BasePath">
            <summary>
            Gets or sets the base path to use when relativising file paths to publish.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.BucketName">
            <summary>
            Gets or sets the bucket name to use when publishing files.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.Files">
            <summary>
            Gets the collection of files to publish.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.OverwriteExisting">
            <summary>
            Gets or sets a value indicating whether to overwrite existing objects.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.OverwriteExistingPrefix">
            <summary>
            Gets or sets a value indicating whether to overwrite objects
            in the given prefix. If false and <see cref="P:Tasty.Build.S3Publisher.Prefix"/> is set
            and the prefix exists on the service, nothing will be written at all.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.Prefix">
            <summary>
            Gets or sets the prefix to use as the root path for the published directory on S3.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.PublisherDelegate">
            <summary>
            Gets or sets the delegate to use when posting publish notifications.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.Timeout">
            <summary>
            Gets or sets the timeout, in milliseconds, to use when making a request.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.UseSsl">
            <summary>
            Gets or sets a value indicating whether to use SSL when connecting to the service.
            </summary>
        </member>
        <member name="T:Tasty.Build.S3Publish">
            <summary>
            Extends <see cref="T:Microsoft.Build.Utilities.Task"/> to publish static assets to Amazon S3.
            Very primitive implementation: does not allow gzip toggling or ACL setting.
            </summary>
        </member>
        <member name="M:Tasty.Build.S3Publish.#ctor">
            <summary>
            Initializes a new instance of the S3Publish class.
            </summary>
        </member>
        <member name="M:Tasty.Build.S3Publish.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns>True if the task executed successfully, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publish.OnFilePublished(System.String,System.String,System.Boolean)">
            <summary>
            Called when a file has been successfully published to Amazon S3.
            </summary>
            <param name="path">The path of the file that was published.</param>
            <param name="objectKey">The resulting object key of the file on Amazon S3.</param>
            <param name="withGzip">A value indicating whether the file was compressed with GZip before publishing.</param>
        </member>
        <member name="M:Tasty.Build.S3Publish.OnFileSkipped(System.String,System.String)">
            <summary>
            Called when a file is skipped for publishing because it already exists.
            </summary>
            <param name="path">The path of the file that was skipped.</param>
            <param name="objectKey">The object key of the file on the service.</param>
        </member>
        <member name="M:Tasty.Build.S3Publish.OnPrefixSkipped(System.String)">
            <summary>
            Called when an entire prefix is skipped for publishing because it already exists.
            </summary>
            <param name="prefix">The prefix that was skipped.</param>
        </member>
        <member name="P:Tasty.Build.S3Publish.AccessKeyId">
            <summary>
            Gets or sets the Amazon S3 access key ID to use when connecting to the service.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.BasePath">
            <summary>
            Gets or sets the base path to use when relativizing published file paths.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.BucketName">
            <summary>
            Gets or sets the name of the bucket to publish assets to.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.Files">
            <summary>
            Gets or sets the file set to publish.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.FilesPublished">
            <summary>
            Gets or sets the collection of files that were published.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.FilesSkipped">
            <summary>
            Gets or sets the collection of files that were skipped because
            <see cref="P:Tasty.Build.S3Publish.OverwriteExisting"/> is false and the objects exist.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.OverwriteExisting">
            <summary>
            Gets or sets a value indicating whether to overwrite existing objects.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.OverwriteExistingPrefix">
            <summary>
            Gets or sets a value indicating whether to overwrite objects
            in the given prefix. If false and <see cref="P:Tasty.Build.S3Publish.Prefix"/> is set
            and the prefix exists on the service, nothing will be written at all.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.Prefix">
            <summary>
            Gets or sets the object prefix to use for object keys when publishing files.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.PrefixSkipped">
            <summary>
            Gets or sets a value indicating whether the prefix was skipped because
            <see cref="P:Tasty.Build.S3Publish.OverwriteExistingPrefix"/> is false and it exists.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.SecretAccessKeyId">
            <summary>
            Gets or sets the Amazon S3 secret access key ID to use when connecting to the service.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.Timeout">
            <summary>
            Gets or sets the timeout, in milliseconds, to use when making service requests.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.UseSsl">
            <summary>
            Gets or sets a value indicating whether to connect to the service using SSL.
            </summary>
        </member>
        <member name="T:Tasty.Build.SchemaUpgradeService">
            <summary>
            Provides a simple SQL schema upgrade service.
            </summary>
        </member>
        <member name="F:Tasty.Build.SchemaUpgradeService.VersionNumberExpression">
            <summary>
            Gets a regular expression that can be used to mach a version number.
            </summary>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.#ctor(System.String,Tasty.Build.ISchemaUpgradeDelegate)">
            <summary>
            Initializes a new instance of the SchemaUpgradeService class.
            </summary>
            <param name="connectionString">A connection string to the database to upgrade.</param>
            <param name="upgradeDelegate">An <see cref="T:Tasty.Build.ISchemaUpgradeDelegate"/> that will provide meta-data information about the target database.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.CreateDatabase(System.String,System.String,System.String)">
            <summary>
            Creates a new database on the server defined by the given connection string.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the server.</param>
            <param name="databaseName">The name of the database to create.</param>
            <param name="filesPath">The path to the directory where the database files will be located.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.CreateDatabase(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new database on the server defined by the given connection string.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the server.</param>
            <param name="databaseName">The name of the database to create.</param>
            <param name="filesPath">The path to the directory where the database files will be located.</param>
            <param name="databaseUser">The name of the server login and database user to create for accessing the database, or null if not applicable.</param>
            <param name="databaseUserPassword">The password of the server login and database user to create for accessing the database, or null if not applicable.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.DatabaseExists(System.String,System.String)">
            <summary>
            Gets a value indicating whether the given database exists for the server
            at the given connection string.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the server.</param>
            <param name="databaseName">The name of the database to check for.</param>
            <returns>True if the database exists, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.DropDatabase(System.String,System.String)">
            <summary>
            Drops the given database.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database server.</param>
            <param name="databaseName">The name of the database to drop.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.DropDatabase(System.String,System.String,System.String)">
            <summary>
            Drops the given database, optionally dropping the givin database login as well.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database server.</param>
            <param name="databaseName">The name of the database to drop.</param>
            <param name="databaseUser">The name of the login to drop, if applicable.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.GenerateInstallScript(System.Version,System.Version,System.String,System.String)">
            <summary>
            Generates a SQL installation script by searching the given directory for SQL script files with
            names that correspond to version numbers and concatenating them together into a file created
            at the given output path.
            </summary>
            <param name="fromVersion">The lower-bound version number to restrict the resulting script to (exclusive).</param>
            <param name="toVersion">The upper-bound version number to restrict the resulting script to (inclusive).</param>
            <param name="searchPath">The directory to search for scripts within (the search with be recursive).</param>
            <param name="outputPath">The path of the output file to create or overwrite.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.GenerateInstallScript(System.Version,System.Version,System.String,System.String,System.Action{System.Version,System.String})">
            <summary>
            Generates a SQL installation script by searching the given directory for SQL script files with
            names that correspond to version numbers and concatenating them together into a file created
            at the given output path.
            </summary>
            <param name="fromVersion">The lower-bound version number to restrict the resulting script to (exclusive).</param>
            <param name="toVersion">The upper-bound version number to restrict the resulting script to (inclusive).</param>
            <param name="searchPath">The directory to search for scripts within (the search with be recursive).</param>
            <param name="outputPath">The path of the output file to create or overwrite.</param>
            <param name="onGenerating">A function that should be called for each script that is found and added to the output.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.ExecuteCommandSet(Tasty.Build.SchemaUpgradeCommandSet,System.Data.SqlClient.SqlConnection)">
            <summary>
            Executes the given <see cref="T:Tasty.Build.SchemaUpgradeCommandSet"/> on the given <see cref="T:System.Data.SqlClient.SqlConnection"/>.
            </summary>
            <param name="commandSet">The <see cref="T:Tasty.Build.SchemaUpgradeCommandSet"/> containing the SQL commands to execute.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to execute the command set on.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.ExecuteCommandSet(Tasty.Build.SchemaUpgradeCommandSet,System.Data.SqlClient.SqlConnection,System.Nullable{System.Int32})">
            <summary>
            Executes the given <see cref="T:Tasty.Build.SchemaUpgradeCommandSet"/> on the given <see cref="T:System.Data.SqlClient.SqlConnection"/>.
            </summary>
            <param name="commandSet">The <see cref="T:Tasty.Build.SchemaUpgradeCommandSet"/> containing the SQL commands to execute.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to execute the command set on.</param>
            <param name="commandTimeout">The timeout to set for each command, or null to use the default value.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.Upgrade">
            <summary>
            Performs the upgraded process.
            </summary>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.EnsureConnectionStringCatalog(System.String,System.String)">
            <summary>
            Ensures that the given connection string and database name both contain values, and that
            the connection string does not point to the given database as its initial catalog.
            </summary>
            <param name="connectionString">The connection string to ensure.</param>
            <param name="databaseName">The database name to ensure.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.GetResourceAsText(System.String)">
            <summary>
            Gets an embedded resource file's contents as a string.
            </summary>
            <param name="resourceName">The name of the resource to get.</param>
            <returns>An embedded resource's text contents.</returns>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeService.CommandTimeout">
            <summary>
            Gets or sets the timeout, in seconds, to set for each individual command
            during the upgrade process.
            </summary>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeService.UpgradeDelegate">
            <summary>
            Gets or sets an <see cref="T:Tasty.Build.ISchemaUpgradeDelegate"/> that provides
            meta-data information about the database being upgraded.
            </summary>
        </member>
        <member name="T:Tasty.Build.SchemaUpgradeCommandSet">
            <summary>
            Represents a set of SQL commands corresponding to a specific version number.
            </summary>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeCommandSet.#ctor(System.String,System.Version,System.Boolean)">
            <summary>
            Initializes a new instance of the SchemaUpgradeCommandSet class.
            </summary>
            <param name="sql">A string of SQL script to create the command set for.</param>
            <param name="versionNumber">The version number to create the command set for.</param>
            <param name="runInTransaction">A value indicating whether to run this command set in a trasaction.</param>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeCommandSet.Commands">
            <summary>
            Gets a collection of the individual commands in this command set.
            </summary>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeCommandSet.RunInTransaction">
            <summary>
            Gets or sets a value indicating whether to run this command set in a trasaction.
            Set to false if one or more of the commands in the set are illegal inside of a transaction.
            </summary>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeCommandSet.VersionNumber">
            <summary>
            Gets this command set's version number.
            </summary>
        </member>
        <member name="T:Tasty.Build.SchemaUpgradeCommandSetResult">
            <summary>
            Represents the results of an <see cref="T:Tasty.Build.ISchemaUpgradeDelegate"/> request for 
            a string of SQL representing a set of upgrade commands.
            </summary>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeCommandSetResult.#ctor">
            <summary>
            Initializes a new instance of the SchemaUpgradeCommandSetResult class.
            </summary>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeCommandSetResult.RunInTransaction">
            <summary>
            Gets or sets a value indicating whether to run the commands in a transaction.
            Set to false if one or more of the commands in the set are illegal inside of a transaction.
            </summary>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeCommandSetResult.Sql">
            <summary>
            Gets or sets the SQL script to run.
            </summary>
        </member>
        <member name="T:Tasty.Build.SetVersion">
            <summary>
            Implements <see cref="T:Microsoft.Build.Utilities.Task"/> to set version information in AssemblyInfo files.
            </summary>
        </member>
        <member name="M:Tasty.Build.SetVersion.#ctor">
            <summary>
            Initializes a new instance of the SetVersion class.
            </summary>
        </member>
        <member name="M:Tasty.Build.SetVersion.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns>True if the task executed successfully, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Build.SetVersion.Files">
            <summary>
            Gets or sets the file set to set version information in.
            </summary>
        </member>
        <member name="P:Tasty.Build.SetVersion.SetAssemblyFileVersion">
            <summary>
            Gets or sets a value indicating whether to set the AssemblyFileVersion attribute.
            </summary>
        </member>
        <member name="P:Tasty.Build.SetVersion.SetAssemblyVersion">
            <summary>
            Gets or sets a value indicating whether to set the AssemblyVersion attribute.
            </summary>
        </member>
        <member name="P:Tasty.Build.SetVersion.Version">
            <summary>
            Gets or sets the version string to set.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.ClientCertificateElement">
            <summary>
            Represents a whitelist certificate client configuration element.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.ClientCertificateElement.IsReadOnly">
            <summary>
            Gets a value indicating if the System.Configuration.ConfigurationElement object is read-only.
            </summary>
            <returns>True if the System.Configuration.ConfigurationElement object is read-only, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Configuration.ClientCertificateElement.Name">
            <summary>
            Gets or sets the name the client certificate is referred to by.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.ClientCertificateElement.Path">
            <summary>
            Gets or sets the path of the client certificate file.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.ClientCertificateElement.Password">
            <summary>
            Gets or sets the password to use when loading the client certificate file.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.ClientCertificateElement.ResourceName">
            <summary>
            Gets or sets the fully qualified name of the certificate's embedded resource.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.ClientCertificateElement.ResourceType">
            <summary>
            Gets or sets the type name identifying the assembly the certificate is embedded into.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.ClientCertificateElementCollection">
            <summary>
            Represents a collection of <see cref="T:Tasty.Configuration.ClientCertificateElement"/>s in the configuration.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.ClientCertificateElementCollection.Contains(Tasty.Configuration.ClientCertificateElement)">
            <summary>
            Gets a value indicating whether the collection contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the collection contains the item, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Configuration.ClientCertificateElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the unique key of the given element.
            </summary>
            <param name="element">The element to get the key of.</param>
            <returns>The given element's key.</returns>
        </member>
        <member name="T:Tasty.Configuration.EndpointElementCollection">
            <summary>
            Represents a collection of <see cref="T:Tasty.Configuration.EndpointElement"/>s in the configuration.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.EndpointElementCollection.Contains(Tasty.Configuration.EndpointElement)">
            <summary>
            Gets a value indicating whether the collection contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the collection contains the item, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Configuration.EndpointElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the unique key of the given element.
            </summary>
            <param name="element">The element to get the key of.</param>
            <returns>The given element's key.</returns>
        </member>
        <member name="P:Tasty.Configuration.EndpointElementCollection.Item(System.String)">
            <summary>
            Gets the element with the given contract name.
            </summary>
            <param name="contract">The contract name of the element to get.</param>
            <returns>The element with the given contract name.</returns>
        </member>
        <member name="T:Tasty.Configuration.EndpointElement">
            <summary>
            Represents a whitelist certificate client service endpoint configuration element.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.EndpointElement.IsReadOnly">
            <summary>
            Gets a value indicating if the System.Configuration.ConfigurationElement object is read-only.
            </summary>
            <returns>True if the System.Configuration.ConfigurationElement object is read-only, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Configuration.EndpointElement.ClientCertificatePath">
            <summary>
            Gets or sets the path of the client certificate file.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.EndpointElement.ClientCertificatePassword">
            <summary>
            Gets or sets the password to use when loading the client certificate file.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.EndpointElement.ClientCertificateResourceName">
            <summary>
            Gets or sets the fully qualified name of the embedded client certificate resource.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.EndpointElement.ClientCertificateResourceType">
            <summary>
            Gets or sets the type name identifying the assembly the client certificate is embedded into.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.EndpointElement.Contract">
            <summary>
            Gets or sets the service contract the client certificate is for.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.GeocodeElement">
            <summary>
            Represents the geocode configuration element.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.GeocodeElement.IsReadOnly">
            <summary>
            Gets a value indicating if the System.Configuration.ConfigurationElement object is read-only.
            </summary>
            <returns>True if the System.Configuration.ConfigurationElement object is read-only, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Configuration.GeocodeElement.ApiKey">
            <summary>
            Gets or sets the API key to use in geocode requests.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.HttpElement">
            <summary>
            Represents the HTTP configuration element.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.HttpElement.IsReadOnly">
            <summary>
            Gets a value indicating if the System.Configuration.ConfigurationElement object is read-only.
            </summary>
            <returns>True if the System.Configuration.ConfigurationElement object is read-only, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Configuration.HttpElement.Redirects">
            <summary>
            Gets the configured HTTP redirects collection.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.HttpRedirectRuleElement">
            <summary>
            Represents a redirect rule element in the configuration.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.HttpRedirectRuleElement.IsReadOnly">
            <summary>
            Gets a value indicating if the System.Configuration.ConfigurationElement object is read-only.
            </summary>
            <returns>True if the System.Configuration.ConfigurationElement object is read-only, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Configuration.HttpRedirectRuleElement.Pattern">
            <summary>
            Gets or sets the rule's regular expression pattern.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.HttpRedirectRuleElement.RedirectsTo">
            <summary>
            Gets or sets the URL the rule redirects to.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.HttpRedirectRuleElement.RedirectType">
            <summary>
            Gets or sets the type of redirect the rule uses.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.HttpRedirectRuleElementCollection">
            <summary>
            Represents a collection of <see cref="T:Tasty.Configuration.HttpRedirectRuleElement"/>s in the configuration.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.HttpRedirectRuleElementCollection.Contains(Tasty.Configuration.HttpRedirectRuleElement)">
            <summary>
            Gets a value indicating whether the collection contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the collection contains the item, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Configuration.HttpRedirectRuleElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the unique key of the given element.
            </summary>
            <param name="element">The element to get the key of.</param>
            <returns>The given element's key.</returns>
        </member>
        <member name="T:Tasty.Configuration.ServiceElement">
            <summary>
            Represents a whitelist certificate service configuration element.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.ServiceElement.IsReadOnly">
            <summary>
            Gets a value indicating if the System.Configuration.ConfigurationElement object is read-only.
            </summary>
            <returns>True if the System.Configuration.ConfigurationElement object is read-only, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Configuration.ServiceElement.ClientCertificates">
            <summary>
            Gets the service's client certificate element collection.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.ServiceElement.Enabled">
            <summary>
            Gets or sets a value indicating whether validation is enabled for the service.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.ServiceElement.Name">
            <summary>
            Gets or sets the service's name.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.ServiceElement.ServerCertificatePath">
            <summary>
            Gets or sets the path of the server certificate file.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.ServiceElement.ServerCertificatePassword">
            <summary>
            Gets or sets the password to use when loading the server certificate file.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.ServiceElement.ServerCertificateResourceName">
            <summary>
            Gets or sets the fully qualified name of the server certificate's embedded resource.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.ServiceElement.ServerCertificateResourceType">
            <summary>
            Gets or sets the type name identifying the assembly the server certificate is embedded into.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.ServiceElementCollection">
            <summary>
            Represents a collection of <see cref="T:Tasty.Configuration.ServiceElement"/>s in the configuration.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.ServiceElementCollection.Contains(Tasty.Configuration.ServiceElement)">
            <summary>
            Gets a value indicating whether the collection contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the collection contains the item, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Configuration.ServiceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the unique key of the given element.
            </summary>
            <param name="element">The element to get the key of.</param>
            <returns>The given element's key.</returns>
        </member>
        <member name="P:Tasty.Configuration.ServiceElementCollection.Item(System.String)">
            <summary>
            Gets the element with the given name.
            </summary>
            <param name="name">The name of the element to get.</param>
            <returns>The element with the given name.</returns>
        </member>
        <member name="T:Tasty.Configuration.ServiceModelElement">
            <summary>
            Represents the service model configuration element.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.ServiceModelElement.IsReadOnly">
            <summary>
            Gets a value indicating if the System.Configuration.ConfigurationElement object is read-only.
            </summary>
            <returns>True if the System.Configuration.ConfigurationElement object is read-only, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Configuration.ServiceModelElement.Endpoints">
            <summary>
            Gets the endpoint collection.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.ServiceModelElement.Services">
            <summary>
            Gets the service collection.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.TastySettings">
            <summary>
            Represents the Tasty.dll configuration section.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.TastySettings.GetConnectionStringFromMetadata(System.Configuration.KeyValueConfigurationCollection)">
            <summary>
            Gets a connection string value from the connection string name identified in the given
            configured metadata collection.
            </summary>
            <param name="metadata">The metadata configuration collection containing the connection string name.</param>
            <returns>The connection string value, or null if not found.</returns>
        </member>
        <member name="M:Tasty.Configuration.TastySettings.IsReadOnly">
            <summary>
            Gets a value indicating if the System.Configuration.ConfigurationElement object is read-only.
            </summary>
            <returns>True if the System.Configuration.ConfigurationElement object is read-only, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Configuration.TastySettings.Section">
            <summary>
            Gets or sets the tasty.dll configuration section.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.TastySettings.Geocode">
            <summary>
            Gets the geocode configuration element.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.TastySettings.GitHub">
            <summary>
            Gets the GitHub configuration element.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.TastySettings.Http">
            <summary>
            Gets the HTTP configuration element.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.TastySettings.ServiceModel">
            <summary>
            Gets the service model configuration element.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.TastySettings.UrlTokens">
            <summary>
            Gets the URL tokens configuration element.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.UrlTokensElement">
            <summary>
            Represents the URL tokens configuration element.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.UrlTokensElement.IsReadOnly">
            <summary>
            Gets a value indicating if the System.Configuration.ConfigurationElement object is read-only.
            </summary>
            <returns>True if the System.Configuration.ConfigurationElement object is read-only, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Configuration.UrlTokensElement.DefaultExpiryHours">
            <summary>
            Gets or sets the default number of hours after creation URL tokens expire.
            When not configured, defaults to 168 (1 week).
            </summary>
        </member>
        <member name="P:Tasty.Configuration.UrlTokensElement.Metadata">
            <summary>
            Gets any metadata configured for the URL token store.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.UrlTokensElement.UrlTokenStoreType">
            <summary>
            Gets or sets the <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> implementation to use when persisting URL tokens.
            </summary>
        </member>
        <member name="T:Tasty.DataSets">
            <summary>
            Provides extensions and helpers for <see cref="T:System.Data.DataSet"/>s.
            </summary>
        </member>
        <member name="M:Tasty.DataSets.WriteToOdsFile(System.Data.DataSet,System.String)">
            <summary>
            Writes the <see cref="T:System.Data.DataSet"/> to an OpenDocument spreadsheet (.ods file).
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to write.</param>
            <param name="path">The path to write to.</param>
        </member>
        <member name="M:Tasty.DataSets.WriteToOdsFile(Tasty.Spreadsheets.ISpreadsheetDataSet,System.String)">
            <summary>
            Writes the <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to an OpenDocument spreadsheet (.ods file).
            </summary>
            <param name="dataSet">The <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to write.</param>
            <param name="path">The path to write to.</param>
        </member>
        <member name="M:Tasty.DataSets.WriteToXlsxFile(System.Data.DataSet,System.String)">
            <summary>
            Writes the <see cref="T:System.Data.DataSet"/> to an Excel spreadsheet (.xlsx file).
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to write.</param>
            <param name="path">The path to write to.</param>
        </member>
        <member name="M:Tasty.DataSets.WriteToXlsxFile(Tasty.Spreadsheets.ISpreadsheetDataSet,System.String)">
            <summary>
            Writes the <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to an Excel spreadsheet (.xlsx file).
            </summary>
            <param name="dataSet">The <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to write.</param>
            <param name="path">The path to write to.</param>
        </member>
        <member name="T:Tasty.ExceptionXElement">
            <summary>
            Creates an XML-Linq XElement from an Exception instance.
            </summary>
        </member>
        <member name="M:Tasty.ExceptionXElement.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the ExceptionXElement class.
            </summary>
            <param name="exception">An Exception to create an XElement from.</param>
        </member>
        <member name="M:Tasty.ExceptionXElement.SerializeToXElement(System.Exception)">
            <summary>
            Serializes the given Exception to an XElement object.
            </summary>
            <param name="exception">The Exception to serialize.</param>
            <returns>The serialized Exception as an XElement.</returns>
        </member>
        <member name="T:Tasty.Files">
            <summary>
            Provides extensions for working with files.
            </summary>
        </member>
        <member name="M:Tasty.Files.GetFilesForPatterns(System.String,System.String)">
            <summary>
            Gets a combined collection of file paths for each file found
            in the given directory for each of the given search patterns.
            </summary>
            <param name="path">The path of the directory to get files from.</param>
            <param name="searchPatterns">The search patterns to use, separated by a semi-colon.</param>
            <returns>A collection of file paths.</returns>
        </member>
        <member name="M:Tasty.Files.Hash(System.IO.Stream)">
            <summary>
            Computes the SHA1 hash of the given stream. If the stream supports
            seeking it will be moved to position 0 before hashing if necessary.
            </summary>
            <param name="stream">The stream to compute the hash of.</param>
            <returns>The computed SHA1 hash.</returns>
        </member>
        <member name="M:Tasty.Files.SaveAndHash(System.IO.Stream,System.String)">
            <summary>
            Saves the given stream to the given path, computes the resulting
            file's SHA1 hash and returns it.
            </summary>
            <param name="stream">The stream to save and compute the hash of.</param>
            <param name="path">The path to save the stream's contents to.</param>
            <returns>The SHA1 hash of the given stream's file.</returns>
        </member>
        <member name="T:Tasty.QueuedDictionary`2">
            <summary>
            Represents a dictionary with a size cap, which automatically evicts items
            based on the desired access pattern.
            </summary>
            <typeparam name="TKey">The type of the dictionary's keys.</typeparam>
            <typeparam name="TValue">The type of the dictionary's values.</typeparam>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tasty.QueuedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.#ctor(System.Int32,Tasty.QueuedDictionaryAccessCompareMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Tasty.QueuedDictionary`2"/> class.
            </summary>
            <param name="maximumSize">The maximum number of elements to allow the dictionary to hold.</param>
            <param name="evictionMode">The mode to use when determining which items to evict during an eviction.</param>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the QueuedDictionary class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to read.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization.</param>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the given key and value to the dictionary.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the given item to the dictionary.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the given key and value to the dictionary.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.Contains(System.Object)">
            <summary>
            Gets a value indicating whether the given key exists in the dictionary.
            </summary>
            <param name="key">The key to check the existence of.</param>
            <returns>True if the key exists, false otherwise.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Gets a value indicating whether the given item exists in the dictionary.
            </summary>
            <param name="item">The item to check the existence of.</param>
            <returns>True if the item exists, false otherwise.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.ContainsKey(`0)">
            <summary>
            Gets a value indicating whether the given key exists in the dictionary.
            </summary>
            <param name="key">The key to check the existence of.</param>
            <returns>True if the key exists, false otherwise.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at the given array index.
            </summary>
            <param name="array">The array to copy elements to.</param>
            <param name="index">The index in the array to begin copying.</param>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at the given array index.
            </summary>
            <param name="array">The array to copy elements to.</param>
            <param name="arrayIndex">The index in the array to begin copying.</param>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that enumerates through the collection.
            </summary>
            <returns>An enumerator that enumerates through the collection.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator that enumerates through the collection.
            </summary>
            <returns>An enumerator that enumerates through the collection.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates through the collection.
            </summary>
            <returns>An enumerator that enumerates through the collection.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization.</param>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.Remove(System.Object)">
            <summary>
            Removes the element with the specified key.
            </summary>
            <param name="key">The key to remove.</param>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of the given item.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was found, false otherwise.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if the key was found, false otherwise.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key
            </summary>
            <param name="key">The key to get the value for.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>True if the dictionary contains the specified key, false otherwise.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.AddConcrete(`0,`1)">
            <summary>
            Performs the concrete add or set operation of the given key/value pair.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add or set.</param>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.Evict">
            <summary>
            Executes an eviction batch and evicts items in the dictionary until it reaches <see cref="P:Tasty.QueuedDictionary`2.MaximumSize"/> or less.
            </summary>
            <returns>The number of items evicted.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.IncrementAccessStatistics(`0)">
            <summary>
            Increments the access count and last access date of the statistics for the given key,
            creating a statistics entry if it does not already exist.
            </summary>
            <param name="key">The key to increment access statistics for.</param>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.RemoveConcrete(`0)">
            <summary>
            Performs the conrete remove of the given key.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>A value indicating whether the key was found.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.SortStatistics">
            <summary>
            Sorts this instance's <see cref="P:Tasty.QueuedDictionary`2.Statistics"/> using the current <see cref="P:Tasty.QueuedDictionary`2.StatisticsComparer"/>.
            </summary>
        </member>
        <member name="M:Tasty.QueuedDictionary`2.Now">
            <summary>
            Gets the current, hight-resolution, date/time.
            </summary>
            <returns>The current date/time.</returns>
        </member>
        <member name="E:Tasty.QueuedDictionary`2.Evicted">
            <summary>
            Event fired when a batch of items in the dictionary are evicted.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.EvictionMode">
            <summary>
            Gets or sets the eviction mode to use when determining which items
            to evict when <see cref="P:Tasty.QueuedDictionary`2.MaximumSize"/> has been reached.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the dictionary has a fixed-size.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary is read-only.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is syncronized.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets a collection containing the keys in the dictionary.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the dictionary.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.MaximumSize">
            <summary>
            Gets or sets the maximum number of elements to allow in the dictionary
            before invoking the eviction policy.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to syncronize access to the collection.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.InnerDictionary">
            <summary>
            Gets the concrete dictionary used to store the dictionary contents.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.Statistics">
            <summary>
            Gets the sorted list of access statistics.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.StatisticsComparer">
            <summary>
            Gets the comparer to use when sorting access statistics.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.StatisticsLookup">
            <summary>
            Gets a collection used for direct lookup of access statistics.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.Item(System.Object)">
            <summary>
            Gets or sets the element with the given key.
            </summary>
            <param name="key">The key to get or set the element for.</param>
            <returns>The element identified by the given key.</returns>
        </member>
        <member name="P:Tasty.QueuedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the given key.
            </summary>
            <param name="key">The key to get or set the element for.</param>
            <returns>The element identified by the given key.</returns>
        </member>
        <member name="T:Tasty.QueuedDictionaryAccess">
            <summary>
            Represents access statistics for a key in a <see cref="T:Tasty.QueuedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the QueuedDictionaryAccess class.
            </summary>
            <param name="key">The dictionary key being tracked.</param>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess.#ctor(System.Object,System.DateTime)">
            <summary>
            Initializes a new instance of the QueuedDictionaryAccess class.
            </summary>
            <param name="key">The dictionary key being tracked.</param>
            <param name="now">The current date, used to initialize the date-based access fields.</param>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess.#ctor(Tasty.QueuedDictionaryAccess)">
            <summary>
            Initializes a new instance of the QueuedDictionaryAccess class.
            </summary>
            <param name="other">The object to create this instance from.</param>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess.op_Equality(Tasty.QueuedDictionaryAccess,Tasty.QueuedDictionaryAccess)">
            <summary>
            Gets a value indicating whether the given objects are equal.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess.op_Inequality(Tasty.QueuedDictionaryAccess,Tasty.QueuedDictionaryAccess)">
            <summary>
            Gets a value indicating whether the given objects are not-equal.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>True if the objects are not equal, false otherwise.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>True if the current object is equal to the given object, false otherwise.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess.Equals(Tasty.QueuedDictionaryAccess)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>True if the current object is equal to the given object, false otherwise.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Tasty.QueuedDictionaryAccess.AccessCount">
            <summary>
            Gets or sets the key's total access count.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionaryAccess.CreationDate">
            <summary>
            Gets the date the key was created.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionaryAccess.Key">
            <summary>
            Gets or sets the key being referenced.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionaryAccess.LastAccessDate">
            <summary>
            Gets or sets the key's last access date.
            </summary>
        </member>
        <member name="T:Tasty.QueuedDictionaryAccessCompareMode">
            <summary>
            Defines the compare modes for evicting items in a <see cref="T:Tasty.QueuedDictionary`2"/>.
            </summary>
        </member>
        <member name="F:Tasty.QueuedDictionaryAccessCompareMode.AccessCountAscending">
            <summary>
            Identifies comparison by access count, in ascending order.
            Equivalent to evicting least-accessed items first.
            </summary>
        </member>
        <member name="F:Tasty.QueuedDictionaryAccessCompareMode.AccessCountDescending">
            <summary>
            Identifies comparison by access count, in descending order.
            Equivalent to evicting most-accessed items first.
            </summary>
        </member>
        <member name="F:Tasty.QueuedDictionaryAccessCompareMode.CreationDateAscending">
            <summary>
            Identifies comparison by creation date, in ascending order.
            Equivalent to LRU by creation date.
            </summary>
        </member>
        <member name="F:Tasty.QueuedDictionaryAccessCompareMode.CreationDateDescending">
            <summary>
            Identifies comparison by creation date, in descending order.
            Equivalent to MRU by creation date.
            </summary>
        </member>
        <member name="F:Tasty.QueuedDictionaryAccessCompareMode.LastAccessDateAscending">
            <summary>
            Identifies comparison by last access date, in ascending order.
            Equivalent to LRU by last access date.
            </summary>
        </member>
        <member name="F:Tasty.QueuedDictionaryAccessCompareMode.LastAccessDateDescending">
            <summary>
            Identifies comparison by last access date, in decending order.
            Equivalent to MRU by last access date.
            </summary>
        </member>
        <member name="T:Tasty.QueuedDictionaryAccessComparer">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IComparer`1"/> to compare <see cref="T:Tasty.QueuedDictionaryAccess"/> objects.
            </summary>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccessComparer.#ctor(Tasty.QueuedDictionaryAccessCompareMode)">
            <summary>
            Initializes a new instance of the QueuedDictionaryAccessComparer class.
            </summary>
            <param name="mode">The comparison mode to use.</param>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccessComparer.Compare(Tasty.QueuedDictionaryAccess,Tasty.QueuedDictionaryAccess)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="P:Tasty.QueuedDictionaryAccessComparer.Mode">
            <summary>
            Gets or sets the comparison mode to use.
            </summary>
        </member>
        <member name="T:Tasty.QueuedDictionaryAccessComparer`1">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IComparer`1"/> to compare <see cref="T:Tasty.QueuedDictionaryAccess`1"/> objects.
            </summary>
            <typeparam name="TKey">The key type of the <see cref="T:Tasty.QueuedDictionaryAccess`1"/> objects being compared.</typeparam>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccessComparer`1.#ctor(Tasty.QueuedDictionaryAccessCompareMode)">
            <summary>
            Initializes a new instance of the QueuedDictionaryAccessComparer class.
            </summary>
            <param name="mode">The comparison mode to use.</param>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccessComparer`1.Compare(Tasty.QueuedDictionaryAccess{`0},Tasty.QueuedDictionaryAccess{`0})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="T:Tasty.QueuedDictionaryAccess`1">
            <summary>
            Represents access statistics for a key in a <see cref="T:Tasty.QueuedDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the QueuedDictionaryAccess class.
            </summary>
            <param name="key">The dictionary key being tracked.</param>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess`1.#ctor(`0,System.DateTime)">
            <summary>
            Initializes a new instance of the QueuedDictionaryAccess class.
            </summary>
            <param name="key">The dictionary key being tracked.</param>
            <param name="now">The current date, used to initialize the date-based access fields.</param>
        </member>
        <member name="M:Tasty.QueuedDictionaryAccess`1.#ctor(Tasty.QueuedDictionaryAccess{`0})">
            <summary>
            Initializes a new instance of the QueuedDictionaryAccess class.
            </summary>
            <param name="other">The object to create this instance from.</param>
        </member>
        <member name="P:Tasty.QueuedDictionaryAccess`1.Key">
            <summary>
            Gets or sets the key being referenced.
            </summary>
        </member>
        <member name="T:Tasty.QueuedDictionaryEventArgs">
            <summary>
            Represents event arguments for <see cref="T:Tasty.QueuedDictionary`2"/> events.
            </summary>
        </member>
        <member name="M:Tasty.QueuedDictionaryEventArgs.#ctor(System.Collections.Generic.IEnumerable{Tasty.QueuedDictionaryEventArgsItem})">
            <summary>
            Initializes a new instance of the QueuedDictionaryEventArgs class.
            </summary>
            <param name="items">The collection of items participating in the event.</param>
        </member>
        <member name="P:Tasty.QueuedDictionaryEventArgs.Items">
            <summary>
            Gets the collection of items participating in the event.
            </summary>
        </member>
        <member name="T:Tasty.QueuedDictionaryEventArgsItem">
            <summary>
            Represents an item that has participated in a <see cref="T:Tasty.QueuedDictionary`2"/> event.
            </summary>
        </member>
        <member name="M:Tasty.QueuedDictionaryEventArgsItem.#ctor(System.Object,System.Object,Tasty.QueuedDictionaryAccess)">
            <summary>
            Initializes a new instance of the QueuedDictionaryEventArgsItem class.
            </summary>
            <param name="key">The item's key.</param>
            <param name="value">The item's value.</param>
            <param name="access">The item's access statistics.</param>
        </member>
        <member name="P:Tasty.QueuedDictionaryEventArgsItem.Access">
            <summary>
            Gets the item's access statistics.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionaryEventArgsItem.Key">
            <summary>
            Gets the item's key.
            </summary>
        </member>
        <member name="P:Tasty.QueuedDictionaryEventArgsItem.Value">
            <summary>
            Gets the item's value.
            </summary>
        </member>
        <member name="T:Tasty.ReadOnlyDictionary`2">
            <summary>
            Wraps an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance with read-only behavior.
            </summary>
            <typeparam name="TKey">The type of the dictionary's keys.</typeparam>
            <typeparam name="TValue">The type of the dictionary's values.</typeparam>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the ReadOnlyDictionary class.
            </summary>
            <param name="dictionary">The dictionary to wrap with read only behavior.</param>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not supported.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Not supported.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.Clear">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the collection contains the given item.
            </summary>
            <param name="item">The item to check.</param>
            <returns>True if the collection contains the item, false otherwise.</returns>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Gets a value indicating whether the dictionary contains the given key.
            </summary>
            <param name="key">The key to check for.</param>
            <returns>True if the dictionary contains the key, false otherwise.</returns>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to the given array, starting at the given index in the array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index in the array to start copying at.</param>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not supported.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the key was found, false otherwise.</returns>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Not supported.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if the key was found, false otherwise.</returns>
        </member>
        <member name="M:Tasty.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value for the given key.
            </summary>
            <param name="key">The key to try to get the value for.</param>
            <param name="value">Contains the value upon completion when successful.</param>
            <returns>True if the value was retrieved successfully, false otherwise.</returns>
        </member>
        <member name="P:Tasty.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Tasty.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read only.
            </summary>
        </member>
        <member name="P:Tasty.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a collection of all of the keys in the dictionary.
            </summary>
        </member>
        <member name="P:Tasty.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection containing all of the values in the dictionary.
            </summary>
        </member>
        <member name="P:Tasty.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value for the given key. This indexer's setter is not supported.
            </summary>
            <param name="key">The key to get or set the value for.</param>
            <returns>The value for the given key.</returns>
        </member>
        <member name="T:Tasty.Spreadsheets.ISpreadsheetDataColumn">
            <summary>
            Interface definition for spreadsheet columns.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.ISpreadsheetDataColumn.DataType">
            <summary>
            Gets the type of the column's data.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.ISpreadsheetDataColumn.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="T:Tasty.Spreadsheets.ISpreadsheetDataRow">
            <summary>
            Interface definition for spreadsheet rows.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.ISpreadsheetDataRow.Item(System.Int32)">
            <summary>
            Gets the value of the item in the given column for this row.
            </summary>
            <param name="columnIndex">The index of the column to get the item value for.</param>
            <returns>The value of the item in the given column.</returns>
        </member>
        <member name="P:Tasty.Spreadsheets.ISpreadsheetDataRow.Item(System.String)">
            <summary>
            Gets the value of the item in the given column for this row.
            </summary>
            <param name="columnName">The name of the column to get the item value for.</param>
            <returns>The value of the item in the given column.</returns>
        </member>
        <member name="T:Tasty.Spreadsheets.ISpreadsheetDataSet">
            <summary>
            Interface definition for spreadsheet data sets.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.ISpreadsheetDataSet.Tables">
            <summary>
            Gets the set's table collection.
            </summary>
        </member>
        <member name="T:Tasty.Spreadsheets.ISpreadsheetDataTable">
            <summary>
            Interface definition for spreadsheet tables.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.ISpreadsheetDataTable.Columns">
            <summary>
            Gets the table's column collection.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.ISpreadsheetDataTable.Name">
            <summary>
            Gets the table's name.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.ISpreadsheetDataTable.Rows">
            <summary>
            Gets the table's row collection.
            </summary>
        </member>
        <member name="T:Tasty.LambdaComparer`1">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for use with arbitrary lambda expressions.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
        </member>
        <member name="M:Tasty.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Initializes a new instance of the LambdaComparer class.
            </summary>
            <param name="comparer">A lambda expression that can be used to compare objects for this instance's type.</param>
        </member>
        <member name="M:Tasty.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the LambdaComparer class.
            </summary>
            <param name="comparer">A lambda expression that can be used to compare objects for this instance's type.</param>
            <param name="hasher">A lambda expression that can be used to get the hash code of objects for this instance's type,
            or null to use each object's native <see cref="M:System.Object.GetHashCode"/> method.</param>
        </member>
        <member name="M:Tasty.LambdaComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Tasty.LambdaComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The object to get a hash code for.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="T:Tasty.MailTemplate">
            <summary>
            Represents an XSLT email template and its transformation.
            </summary>
        </member>
        <member name="M:Tasty.MailTemplate.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the MailTemplate class.
            </summary>
            <param name="templateStream">The stream of template data to initialize this instance with.</param>
        </member>
        <member name="M:Tasty.MailTemplate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MailTemplate class.
            </summary>
            <param name="templatePath">The path to the XSLT template file to use.</param>
        </member>
        <member name="M:Tasty.MailTemplate.Finalize">
            <summary>
            Finalizes an instance of the MailTemplate class.
            </summary>
        </member>
        <member name="M:Tasty.MailTemplate.Dispose">
            <summary>
            Disposes of resources used by this instance.
            </summary>
        </member>
        <member name="M:Tasty.MailTemplate.Transform(Tasty.MailModel)">
            <summary>
            Transforms the given model using this instance's template.
            </summary>
            <param name="model">The model to transform.</param>
            <returns>A string of XML representing the transformed model.</returns>
        </member>
        <member name="M:Tasty.MailTemplate.Transform(Tasty.MailModel,System.Xml.XmlWriter)">
            <summary>
            Transforms the given model using this instance's template.
            </summary>
            <param name="model">The model to transform.</param>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write the results of the transformation to.</param>
        </member>
        <member name="M:Tasty.MailTemplate.Dispose(System.Boolean)">
            <summary>
            Disposes of resources used by this instance.
            </summary>
            <param name="disposing">A value indicating whether to actively dispose of managed resources.</param>
        </member>
        <member name="T:Tasty.ShaLevel">
            <summary>
            Defines the possible SHA hashing levels.
            </summary>
        </member>
        <member name="F:Tasty.ShaLevel.One">
            <summary>
            Identifies SHA1.
            </summary>
        </member>
        <member name="F:Tasty.ShaLevel.TwoFiftySix">
            <summary>
            Identifies SHA256.
            </summary>
        </member>
        <member name="F:Tasty.ShaLevel.FiveTwelve">
            <summary>
            Identifies SHA512.
            </summary>
        </member>
        <member name="T:Tasty.Spreadsheets.SpreadsheetDataColumn">
            <summary>
            Implements <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataColumn"/> for <see cref="T:System.Data.DataColumn"/>s.
            </summary>
        </member>
        <member name="M:Tasty.Spreadsheets.SpreadsheetDataColumn.#ctor(System.Data.DataColumn)">
            <summary>
            Initializes a new instance of the SpreadsheetDataColumn class.
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/> to wrap.</param>
        </member>
        <member name="P:Tasty.Spreadsheets.SpreadsheetDataColumn.DataType">
            <summary>
            Gets the type of the column's data.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.SpreadsheetDataColumn.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="T:Tasty.Spreadsheets.SpreadsheetDataRow">
            <summary>
            Implements <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataRow"/> for <see cref="T:System.Data.DataRow"/>s.
            </summary>
        </member>
        <member name="M:Tasty.Spreadsheets.SpreadsheetDataRow.#ctor(System.Data.DataRow)">
            <summary>
            Initializes a new instance of the SpreadsheetDataRow class.
            </summary>
            <param name="row">The <see cref="T:System.Data.DataRow"/> to wrap.</param>
        </member>
        <member name="P:Tasty.Spreadsheets.SpreadsheetDataRow.Item(System.Int32)">
            <summary>
            Gets the value of the item in the given column for this row.
            </summary>
            <param name="columnIndex">The index of the column to get the item value for.</param>
            <returns>The value of the item in the given column.</returns>
        </member>
        <member name="P:Tasty.Spreadsheets.SpreadsheetDataRow.Item(System.String)">
            <summary>
            Gets the value of the item in the given column for this row.
            </summary>
            <param name="columnName">The name of the column to get the item value for.</param>
            <returns>The value of the item in the given column.</returns>
        </member>
        <member name="T:Tasty.Spreadsheets.SpreadsheetDataSet">
            <summary>
            Implements <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> for <see cref="T:System.Data.DataSet"/>s.
            </summary>
        </member>
        <member name="M:Tasty.Spreadsheets.SpreadsheetDataSet.#ctor(System.Data.DataSet)">
            <summary>
            Initializes a new instance of the SpreadsheetDataSet class.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to wrap.</param>
        </member>
        <member name="P:Tasty.Spreadsheets.SpreadsheetDataSet.Tables">
            <summary>
            Gets the set's table collection.
            </summary>
        </member>
        <member name="T:Tasty.Spreadsheets.SpreadsheetDataTable">
            <summary>
            Implements <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataTable"/> for <see cref="T:System.Data.DataTable"/>s.
            </summary>
        </member>
        <member name="M:Tasty.Spreadsheets.SpreadsheetDataTable.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the SpreadsheetDataTable class.
            </summary>
            <param name="table">The <see cref="T:System.Data.DataTable"/> to wrap.</param>
        </member>
        <member name="P:Tasty.Spreadsheets.SpreadsheetDataTable.Columns">
            <summary>
            Gets the table's column collection.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.SpreadsheetDataTable.Name">
            <summary>
            Gets the table's name.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.SpreadsheetDataTable.Rows">
            <summary>
            Gets the table's row collection.
            </summary>
        </member>
        <member name="T:Tasty.Strings">
            <summary>
            Provides extensions and helpers for strings.
            </summary>
        </member>
        <member name="F:Tasty.Strings.EmailExpression">
            <summary>
            A regular expression that can be used to validate email addresses.
            </summary>
        </member>
        <member name="F:Tasty.Strings.UrlExpression">
            <summary>
            A rough regular expression for validating URLs.
            </summary>
        </member>
        <member name="M:Tasty.Strings.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Alias of <see cref="M:System.String.IndexOf(System.String)"/> to get a value indicating whether the string contains
            the given string value using the specified comparison type.
            </summary>
            <param name="original">The original string to compare.</param>
            <param name="value">The string value to find in the original string.</param>
            <param name="comparisonType">The comparison type to use.</param>
            <returns>True if the value is found in the original string, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Strings.EscapeForPath(System.String)">
            <summary>
            Escapes the given string for use in a filesystem or URL path.
            </summary>
            <param name="pathPart">The path part to escape</param>
            <returns>The escaped path part.</returns>
        </member>
        <member name="M:Tasty.Strings.EscapeForPath(System.String,System.Char)">
            <summary>
            Escapes the given string for use in a filesystem or URL path.
            If pathSeparator is not <see cref="F:System.Char.MinValue"/>, will 
            normalize all path separator characters to the given value and leave the
            path hierarchy intact.
            </summary>
            <param name="pathPart">The path or path part to escape.</param>
            <param name="pathSeparator">The path separator, or <see cref="F:System.Char.MinValue"/> to escape as a single path part.</param>
            <returns>The escaped path.</returns>
        </member>
        <member name="M:Tasty.Strings.FromBase64(System.String)">
            <summary>
            Gets the decoded value of the base-64 string.
            </summary>
            <param name="value">A base-64 encoded string.</param>
            <returns>The decoded string value.</returns>
        </member>
        <member name="M:Tasty.Strings.FromHex(System.String)">
            <summary>
            Converts the given hex string to an array of bytes.
            </summary>
            <param name="hex">The hex string to convert.</param>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:Tasty.Strings.FromLowercaseUnderscore(System.String)">
            <summary>
            Converts the lower_case_underscore string into a PascalCase or camelCalse string.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Tasty.Strings.FromLowercaseUnderscore(System.String,System.Boolean)">
            <summary>
            Converts the lower_case_underscore string into a PascalCase or camelCalse string.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="camel">A value indicating whether to convert to camelCalse. If false, will convert to PascalCase.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Tasty.Strings.FromLowercaseWithSeparator(System.String,System.Char,System.Boolean)">
            <summary>
            Converts the lower case string (with word boundaries separated by the given separator character)
            into a PascalCase or camelCalse string.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="separator">The character used to denote word boundaries.</param>
            <param name="camel">A value indicating whether to convert to camelCalse. If false, will convert to PascalCase.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Tasty.Strings.Hash(System.String)">
            <summary>
            Computes the SHA1 hash of the string.
            </summary>
            <param name="value">The value to hash.</param>
            <returns>The hashed text.</returns>
        </member>
        <member name="M:Tasty.Strings.Hash(System.String,System.Text.Encoding)">
            <summary>
            Computes the SHA1 hash of the string.
            </summary>
            <param name="value">The value to hash.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>The hashed text.</returns>
        </member>
        <member name="M:Tasty.Strings.Hash(System.String,System.Text.Encoding,Tasty.ShaLevel)">
            <summary>
            Computes an SHA hash of the string.
            </summary>
            <param name="value">The string to hash.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="level">The SHA level to use.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:Tasty.Strings.HtmlAttributeEncode(System.String)">
            <summary>
            Encodes the value for use in an HTML/XML attribute.
            </summary>
            <param name="value">The value to encode.</param>
            <returns>The encoded value.</returns>
        </member>
        <member name="M:Tasty.Strings.HtmlDecode(System.String)">
            <summary>
            Decodes the given HTML/XML-encoded value.
            </summary>
            <param name="value">The value to decode.</param>
            <returns>The decoded value.</returns>
        </member>
        <member name="M:Tasty.Strings.HtmlEncode(System.String)">
            <summary>
            Encodes the value for use in an HTML/XML element.
            </summary>
            <param name="value">The value to encode.</param>
            <returns>The encoded value.</returns>
        </member>
        <member name="M:Tasty.Strings.IsValidEmail(System.String)">
            <summary>
            Gets a value indicating whether the string contains a valid email address.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the string is a valid email address, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Strings.IsValidUrl(System.String)">
            <summary>
            Gets a value indicating whether the string contains a valid URL.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the string is a valid URL, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Strings.MD5Hash(System.String)">
            <summary>
            Calculates the MD5 hash of a string.
            </summary>
            <param name="value">The string value to get the MD5 hash of.</param>
            <returns>An MD5 hash.</returns>
        </member>
        <member name="M:Tasty.Strings.RootPath(System.String)">
            <summary>
            Roots the path with the current value of <see cref="P:System.Environment.CurrentDirectory"/>, if it is not null or empty and is not already rooted.
            </summary>
            <param name="path">The path to root.</param>
            <returns>The rooted path, or null or empty if the original path was null or empty.</returns>
        </member>
        <member name="M:Tasty.Strings.RootPath(System.String,System.String)">
            <summary>
            Roots the path with the given path root, if it is not null or empty and is not already rooted.
            </summary>
            <param name="path">The path to root.</param>
            <param name="pathRoot">The rooth path to apply.</param>
            <returns>The rooted path, or null or empty if the original path was null or empty.</returns>
        </member>
        <member name="M:Tasty.Strings.SplitAndTrim(System.String,System.Char)">
            <summary>
            Splits the given string on the given character, removing any empty 
            results and trimming whitespace around the rest of the results.
            </summary>
            <param name="value">The string value to split.</param>
            <param name="separator">The character to split the string on.</param>
            <returns>The split string.</returns>
        </member>
        <member name="M:Tasty.Strings.SplitAndTrim(System.String,System.Char,System.Boolean)">
            <summary>
            Splits the given string on the given character, removing any empty 
            results and trimming whitespace around the rest of the results.
            </summary>
            <param name="value">The string value to split.</param>
            <param name="separator">The character to split the string on.</param>
            <param name="removeEmptyEntries">A value indicating whether to remove empty entries from the results.</param>
            <returns>The split string.</returns>
        </member>
        <member name="M:Tasty.Strings.SplitAndTrim(System.String,System.String)">
            <summary>
            Splits the given string on the given separator, removing any empty 
            results and trimming whitespace around the rest of the results.
            </summary>
            <param name="value">The string value to split.</param>
            <param name="separator">The string to split the string on.</param>
            <returns>The split string.</returns>
        </member>
        <member name="M:Tasty.Strings.SplitAndTrim(System.String,System.String,System.Boolean)">
            <summary>
            Splits the given string on the given separator, removing any empty 
            results and trimming whitespace around the rest of the results.
            </summary>
            <param name="value">The string value to split.</param>
            <param name="separator">The string to split the string on.</param>
            <param name="removeEmptyEntries">A value indicating whether to remove empty entries from the results.</param>
            <returns>The split string.</returns>
        </member>
        <member name="M:Tasty.Strings.SplitConnectionString(System.String)">
            <summary>
            Splits a semi-colon separated connection string into a dictionary of key-value pairs.
            </summary>
            <param name="connectionString">The connection string to split.</param>
            <returns>A dictionary of key-value pairs.</returns>
        </member>
        <member name="M:Tasty.Strings.StripHtml(System.String)">
            <summary>
            Strips all HTML tags from the given string value.
            </summary>
            <param name="value">The string value to strip HTML tags from.</param>
            <returns>The string with HTML stripped.</returns>
        </member>
        <member name="M:Tasty.Strings.ToBase64(System.String)">
            <summary>
            Base-64 encodes the string value.
            </summary>
            <param name="value">The string value to encode.</param>
            <returns>The base-64 encoded value.</returns>
        </member>
        <member name="M:Tasty.Strings.ToConnectionString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Combines the string dictionary with semi-colon (;) separators to form a connection string.
            </summary>
            <param name="dictionary">The string dictionary to combine.</param>
            <returns>The combined connection string.</returns>
        </member>
        <member name="M:Tasty.Strings.ToEmailName(System.String)">
            <summary>
            Gets the first part of an email address for use as a name.
            </summary>
            <param name="email">The email address to get the name part of.</param>
            <returns>An email name.</returns>
        </member>
        <member name="M:Tasty.Strings.ToHex(System.Byte[])">
            <summary>
            Converts the given byte array to a hex string.
            </summary>
            <param name="buffer">The byte array to convert.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:Tasty.Strings.ToLowercaseUnderscore(System.String)">
            <summary>
            Converts the camelCase or PascalCase string to a lower_case_underscore string.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Tasty.Strings.ToLowercaseWithSeparator(System.String,System.Char)">
            <summary>
            Converts the camelCase or PascalCase string to a lower-case string with a separator 
            (e.g., camel_case or pascal-case, depending on the separator).
            </summary>
            <param name="value">The string to convert.</param>
            <param name="separator">The separator to use.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Tasty.Strings.WithExtension(System.String,System.String)">
            <summary>
            Replaces the file extension on the path with the given extension. If no file extension
            exists on the given path, then appends the given extension.
            </summary>
            <param name="path">The path to replace the extension of.</param>
            <param name="extension">The file extension to set, without a "."</param>
            <returns>The updated path.</returns>
        </member>
        <member name="M:Tasty.Strings.SplitAndTrim(System.String,System.Char[],System.Boolean)">
            <summary>
            Splits the given string on the given separator characters, removing any empty 
            results and trimming whitespace around the rest of the results.
            </summary>
            <param name="value">The string value to split.</param>
            <param name="separator">The separator characters to split the string on.</param>
            <param name="removeEmptyEntries">A value indicating whether to remove empty entries from the result.</param>
            <returns>The split string.</returns>
        </member>
        <member name="T:Tasty.ServiceModel.Extensions">
            <summary>
            Extensions and helpers for the <see cref="N:Tasty.ServiceModel"/> namespace.
            </summary>
        </member>
        <member name="M:Tasty.ServiceModel.Extensions.ConfigureForX509WhiteList``1(System.ServiceModel.ClientBase{``0})">
            <summary>
            Configures the given service client with an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> based on the current
            application's <tasty><serviceModel/></tasty> configuration.
            </summary>
            <typeparam name="TChannel">The concrete channel type of the client being configured.</typeparam>
            <param name="client">The client to configure.</param>
        </member>
        <member name="M:Tasty.ServiceModel.Extensions.LoadCertificate(Tasty.Configuration.ClientCertificateElement)">
            <summary>
            Loads the certificate for the given <see cref="T:Tasty.Configuration.ClientCertificateElement"/>.
            </summary>
            <param name="element">The <see cref="T:Tasty.Configuration.ClientCertificateElement"/> to load the certificate for.</param>
            <returns>The loaded certificate.</returns>
        </member>
        <member name="M:Tasty.ServiceModel.Extensions.LoadCertificate(Tasty.Configuration.EndpointElement)">
            <summary>
            Loads the certificate for the given <see cref="T:Tasty.Configuration.EndpointElement"/>.
            </summary>
            <param name="element">The <see cref="T:Tasty.Configuration.EndpointElement"/> to load the certificate for.</param>
            <returns>The loaded certificate.</returns>
        </member>
        <member name="M:Tasty.ServiceModel.Extensions.LoadCertificate(Tasty.Configuration.ServiceElement)">
            <summary>
            Loads the certificate for the given <see cref="T:Tasty.Configuration.ServiceElement"/>.
            </summary>
            <param name="element">The <see cref="T:Tasty.Configuration.ServiceElement"/> to load the certificate for.</param>
            <returns>The loaded certificate.</returns>
        </member>
        <member name="T:Tasty.ServiceModel.X509CertificateLoader">
            <summary>
            Provides a simple service facade for loading <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>s from a stream,
            the filesystem or an embedded resource file.
            </summary>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the X509CertificateLoader class.
            </summary>
            <param name="path">The path to the certificate file to load.</param>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateLoader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the X509CertificateLoader class.
            </summary>
            <param name="path">The path to the certificate file to load.</param>
            <param name="password">The certificate password, or null or empty if no password is required.</param>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateLoader.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the X509CertificateLoader class.
            </summary>
            <param name="type">The type identifying the assembly the embedded certificate file is in.</param>
            <param name="resourceName">The fully qualified name of certificate's embedded resource file.</param>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateLoader.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the X509CertificateLoader class.
            </summary>
            <param name="type">The type identifying the assembly the embedded certificate file is in.</param>
            <param name="resourceName">The fully qualified name of certificate's embedded resource file.</param>
            <param name="password">The certificate password, or null or empty if no password is required.</param>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateLoader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the X509CertificateLoader class.
            </summary>
            <param name="stream">The stream to load the certificate from.</param>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateLoader.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the X509CertificateLoader class.
            </summary>
            <param name="stream">The stream to load the certificate from.</param>
            <param name="password">The certificate password, or null or empty if no password is required.</param>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateLoader.Dispose">
            <summary>
            Disposes of resources used by this instance.
            </summary>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateLoader.LoadCertificate">
            <summary>
            Loads an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> based on this instance's construction configuration.
            </summary>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.</returns>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateLoader.Dispose(System.Boolean)">
            <summary>
            Disposes of resources used by this instance.
            </summary>
            <param name="disposing">A value indicating whether to cleanup managed resources.</param>
        </member>
        <member name="T:Tasty.ServiceModel.X509CertificateWhiteListServiceHost">
            <summary>
            Extends <see cref="T:System.ServiceModel.ServiceHost"/> to apply the custom certificate validation configuration defined
            in the current application's <tasty><serviceModel/></tasty> configuration.
            </summary>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateWhiteListServiceHost.#ctor(System.Type,System.Uri[])">
            <summary>
            Initializes a new instance of the X509CertificateWhiteListServiceHost class.
            </summary>
            <param name="serviceType">The type of the service to host.</param>
            <param name="baseAddresses">The service's base address collection.</param>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateWhiteListServiceHost.ApplyConfiguration">
            <summary>
            Loads the service description information from the configuration and applies it to the runtime being constructed.
            </summary>
        </member>
        <member name="T:Tasty.ServiceModel.X509CertificateWhiteListServiceHostFactory">
            <summary>
            Extends <see cref="T:System.ServiceModel.Activation.ServiceHostFactory"/> to create <see cref="T:Tasty.ServiceModel.X509CertificateWhiteListServiceHost"/> instances.
            </summary>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateWhiteListServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost"/> for the specified type of service.
            </summary>
            <param name="serviceType">The type of service to create the <see cref="T:System.ServiceModel.ServiceHost"/> for.</param>
            <param name="baseAddresses">The collection of base addresses to create the <see cref="T:System.ServiceModel.ServiceHost"/> with.</param>
            <returns>The created <see cref="T:System.ServiceModel.ServiceHost"/></returns>
        </member>
        <member name="T:Tasty.ServiceModel.X509CertificateWhiteListValidator">
            <summary>
            Extends <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator"/> to validate X509 certificates against a whiteList.
            </summary>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateWhiteListValidator.#ctor">
            <summary>
            Initializes a new instance of the X509CertificateWhiteListValidator class.
            </summary>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateWhiteListValidator.#ctor(System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Initializes a new instance of the X509CertificateWhiteListValidator class.
            </summary>
            <param name="whiteList">The certificate whiteList to validate against.</param>
        </member>
        <member name="M:Tasty.ServiceModel.X509CertificateWhiteListValidator.Validate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Validates the X509 certificate.
            </summary>
            <param name="certificate">The X509 certificate to validate.</param>
        </member>
        <member name="P:Tasty.ServiceModel.X509CertificateWhiteListValidator.WhiteList">
            <summary>
            Gets the certificate whiteList to validate against.
            </summary>
        </member>
        <member name="T:Tasty.TastyFileSystemEventType">
            <summary>
            Defines the possible file system event types raised
            by a <see cref="T:Tasty.TastyFileSystemWatcher"/> object.
            </summary>
        </member>
        <member name="F:Tasty.TastyFileSystemEventType.Changed">
            <summary>
            Identifies a changed event.
            </summary>
        </member>
        <member name="F:Tasty.TastyFileSystemEventType.Created">
            <summary>
            Identifies a created event.
            </summary>
        </member>
        <member name="F:Tasty.TastyFileSystemEventType.Deleted">
            <summary>
            Identifies a deleted event.
            </summary>
        </member>
        <member name="F:Tasty.TastyFileSystemEventType.Disposed">
            <summary>
            Identifies a disposed event.
            </summary>
        </member>
        <member name="F:Tasty.TastyFileSystemEventType.Error">
            <summary>
            Identifies an error event.
            </summary>
        </member>
        <member name="F:Tasty.TastyFileSystemEventType.Renamed">
            <summary>
            Identifies a renamed event.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeAddressDetails">
            <summary>
            Represents address details in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeAddressDetails.Country">
            <summary>
            Gets or sets the country of the address.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeAddressDetails.Accuracy">
            <summary>
            Gets or sets the accuracy of the address compared to the geocode request.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeAdministrativeArea">
            <summary>
            Represetns an administrative area in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeAdministrativeArea.AdministrativeAreaName">
            <summary>
            Gets or sets the name of the administrative area.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeAdministrativeArea.Locality">
            <summary>
            Gets or sets the locality of the administrative area.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeAdministrativeArea.SubAdministrativeArea">
            <summary>
            Gets or sets the administrative area's sub-administrative area.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeCallResult">
            <summary>
            Represents the result of an encapsulated geocode request/response call.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeCallResult.Placemark">
            <summary>
            Gets or sets the placemark that was returned in the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeCallResult.Status">
            <summary>
            Gets or sets the result status of the call.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeCallStatus">
            <summary>
            Defines the possible status results of an encapsulated geocode request/response call.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeCallStatus.Unsuccessful">
            <summary>
            Identifies that the call was unsuccessful due to an exception or bad status code.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeCallStatus.NotEnoughAccuracy">
            <summary>
            Identifies that the response didn't have enough accuracy.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeCallStatus.Successful">
            <summary>
            Identifies that the call was successful.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeCountry">
            <summary>
            Represents a country in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeCountry.CountryNameCode">
            <summary>
            Gets or sets the name code of the country.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeCountry.CountryName">
            <summary>
            Gets or sets the name of the country.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeCountry.AdministrativeArea">
            <summary>
            Gets or sets the administrative area in the country.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeException">
            <summary>
            Exception thrown when geocode requests fail.
            </summary>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.#ctor">
            <summary>
            Initializes a new instance of the GeocodeException class.
            </summary>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GeocodeException class.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the GeocodeException class.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.#ctor(Tasty.Geocode.GeocodeRequest,Tasty.Geocode.GeocodeResponse)">
            <summary>
            Initializes a new instance of the GeocodeException class.
            </summary>
            <param name="request">The request that caused the exception to be thrown.</param>
            <param name="response">The response that caused the exception to be thrown.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the GeocodeException class.
            </summary>
            <param name="info">The SerializationInfo that holds object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the given SerializationInfo with data about the exception.
            </summary>
            <param name="info">The SerializationInfo that holds data about the exception.</param>
            <param name="context">The StreamingContext that holds contextual information about the source or destination.</param>
        </member>
        <member name="P:Tasty.Geocode.GeocodeException.Address">
            <summary>
            Gets the address that caused the exception to be thrown.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeException.RequestUri">
            <summary>
            Gets the request URI that caused the exception to be thrown.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeException.ResponseName">
            <summary>
            Gets the name of the response that caused the exception to be thrown.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeException.ResponseStatusCode">
            <summary>
            Gets the response status code that caused the exception to be thrown.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeExtendedData">
            <summary>
            Represents extended data in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeExtendedData.LatLonBox">
            <summary>
            Gets or sets the latitude/longitude bounding box of the geocode response.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeLatLonBox">
            <summary>
            Represetns a latitude/longitude bounding box in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLatLonBox.East">
            <summary>
            Gets or sets the eastern coordinate of the box.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLatLonBox.North">
            <summary>
            Gets or sets the northern coordinate of the box.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLatLonBox.South">
            <summary>
            Gets or sets the southern coordinate of the box.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLatLonBox.West">
            <summary>
            Gets or sets the western corrdinate of the box.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeLocality">
            <summary>
            Represents a locality in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLocality.LocalityName">
            <summary>
            Gets or sets the name of the locality.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLocality.Thoroughfare">
            <summary>
            Gets or sets the thoroughfare of the locality.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLocality.PostalCode">
            <summary>
            Gets or sets the postal code of the locality.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodePlacemark">
            <summary>
            Represents a placemark in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePlacemark.Address">
            <summary>
            Gets or sets the address string of the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePlacemark.AddressDetails">
            <summary>
            Gets or sets the address details of the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePlacemark.ExtendedData">
            <summary>
            Gets or sets the extended data of the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePlacemark.Id">
            <summary>
            Gets or sets the response ID.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePlacemark.Point">
            <summary>
            Gets or sets the response's location point.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodePoint">
            <summary>
            Represents a point in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePoint.Coordinates">
            <summary>
            Gets or sets the point's coordinates.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePoint.Latitude">
            <summary>
            Gets the latitude value of the coordinates.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePoint.Longitude">
            <summary>
            Gets the longitude value of the coordinates.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodePostalCode">
            <summary>
            Represents a geocode postal code.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePostalCode.PostalCodeNumber">
            <summary>
            Gets or sets the postal code number.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeRequest">
            <summary>
            Constructs and performs geocode requests.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeRequest.ServiceUri">
            <summary>
            Gets the URI of the geocode service.
            </summary>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.#ctor(Tasty.Geocode.GeocodeRequestAddress)">
            <summary>
            Initializes a new instance of the GeocodeRequest class.
            </summary>
            <param name="address">The address to make the geocode request for.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.#ctor(Tasty.Geocode.GeocodeRequestAddress,System.String)">
            <summary>
            Initializes a new instance of the GeocodeRequest class.
            </summary>
            <param name="address">The address to make the geocode request for.</param>
            <param name="apiKey">The API key to use when making the request.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.#ctor(Tasty.Web.QueryString)">
            <summary>
            Initializes a new instance of the GeocodeRequest class.
            </summary>
            <param name="query">The custom query to use when making the geocode request.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.CreateRequestUri(Tasty.Geocode.GeocodeRequestAddress)">
            <summary>
            Creates a request URI to use in a geocode request for the given address.
            Restricts the geocode request to the United States.
            </summary>
            <param name="address">The address to create a request URI for.</param>
            <returns>A geocode service request URI.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.CreateRequestUri(Tasty.Geocode.GeocodeRequestAddress,System.String)">
            <summary>
            Creates a request URI to use in a geocode request for the given address.
            Restricts the geocode request to the United States.
            </summary>
            <param name="address">The address to create a request URI for.</param>
            <param name="apiKey">The API key to use when making the request.</param>
            <returns>A geocode service request URI.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.CreateRequestUri(Tasty.Web.QueryString)">
            <summary>
            Creates a request URI to use in a geocode request with the given query.
            </summary>
            <param name="query">The query to create the request URI for.</param>
            <returns>A geocode service request URI.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.Make(Tasty.Geocode.GeocodeRequestAddress)">
            <summary>
            Makes a geocode request with the given address.
            </summary>
            <param name="address">The address to make the request with.</param>
            <returns>The result of the request.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.Make(Tasty.Geocode.GeocodeRequestAddress,System.Int32)">
            <summary>
            Makes a geocode request with the given address.
            </summary>
            <param name="address">The address to make the request with.</param>
            <param name="minimumAccuracy">The minimum accuracy requred for a successful response, or 0 if not applicable.</param>
            <returns>The result of the request.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.Make(Tasty.Geocode.GeocodeRequestAddress,System.String)">
            <summary>
            Makes a geocode request with the given address.
            </summary>
            <param name="address">The address to make the request with.</param>
            <param name="apiKey">The API key to use when making the request.</param>
            <returns>The result of the request.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.Make(Tasty.Geocode.GeocodeRequestAddress,System.String,System.Int32)">
            <summary>
            Makes a geocode request with the given address.
            </summary>
            <param name="address">The address to make the request with.</param>
            <param name="apiKey">The API key to use when making the request.</param>
            <param name="minimumAccuracy">The minimum accuracy requred for a successful response, or 0 if not applicable.</param>
            <returns>The result of the request.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.GetResponse">
            <summary>
            Gets the response of the geocode request.
            </summary>
            <returns>A geocode response.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.GetResponseAsync(System.Action{Tasty.Geocode.GeocodeResponse})">
            <summary>
            Gets the response of the geocode request asynchronously.
            </summary>
            <param name="callback">An action to call when the asynchronous operation has completed.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.DeserializeResponse(System.Net.WebResponse)">
            <summary>
            Deserializes a geocode JSON response into a GeocodeResponse instance.
            </summary>
            <param name="response">The web response to deserialize.</param>
            <returns>A GeocodeResponse instance.</returns>
            <exception cref="T:Tasty.Geocode.GeocodeException"></exception>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequest.Address">
            <summary>
            Gets the address being used to create a request by this instance.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequest.ApiKey">
            <summary>
            Gets the API key being used to make the request.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequest.RequestUri">
            <summary>
            Gets the request URI generated by this instance.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeRequestAddress">
            <summary>
            Represents an address to use in a <see cref="T:Tasty.Geocode.GeocodeRequest"/>.
            </summary>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequestAddress.ToString">
            <summary>
            Gets the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequestAddress.Street">
            <summary>
            Gets or sets the street number of the address.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequestAddress.City">
            <summary>
            Gets or sets the city.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequestAddress.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequestAddress.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeResponse">
            <summary>
            Represents a response to a geocode request.
            </summary>
        </member>
        <member name="M:Tasty.Geocode.GeocodeResponse.FromJson(System.String)">
            <summary>
            Deserializes a GeocodeResponse from a string of JSON.
            </summary>
            <param name="json">The JSON to deserialize the response from.</param>
            <returns>A GeocodeResponse instance.</returns>
        </member>
        <member name="P:Tasty.Geocode.GeocodeResponse.Name">
            <summary>
            Gets or sets the name of the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeResponse.Placemark">
            <summary>
            Gets or sets the placemarks returned by the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeResponse.Status">
            <summary>
            Gets or sets the status of the response.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeResponseStatus">
            <summary>
            Represents a geocode response status.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeResponseStatus.Code">
            <summary>
            Gets or sets the status code of the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeResponseStatus.Request">
            <summary>
            Gets or sets the type of request that generated the response.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeResposeStatusCode">
            <summary>
            Defines the possible <see cref="T:Tasty.Geocode.GeocodeResponseStatus"/> codes.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.Unknown">
            <summary>
            Identifies an unknown status code in a response.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.Success">
            <summary>
            Identifies a successful response.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.ServerError">
            <summary>
            Identifies a server error.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.MissingQuery">
            <summary>
            Identifies an error due to a missing query.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.UnknownAddress">
            <summary>
            Identifies an error due to an unknown address.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.UnavailableAddress">
            <summary>
            Identifies an error due to an unavailable address.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.BadKey">
            <summary>
            Identifies an error due to a bad API key.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.TooManyQueries">
            <summary>
            Identifies an error due to too many requests.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeThoroughfare">
            <summary>
            Represents a throroughfare in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeThoroughfare.ThoroughfareName">
            <summary>
            Gets or sets the name of the thoroughfare.
            </summary>
        </member>
        <member name="T:Tasty.Http.HttpRedirectModule">
            <summary>
            Implements <see cref="T:System.Web.IHttpModule"/> to do simple regular-expression based HTTP redirection.
            </summary>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.#cctor">
            <summary>
            Initializes static members of the HttpRedirectModule class.
            </summary>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.Dispose">
            <summary>
            Disposes of any unmanaged resources.
            </summary>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.GetMatchingRule(System.Web.HttpContextBase)">
            <summary>
            Gets a rule matching the given HTTP context from the configuration.
            Will cache the results of the match.
            </summary>
            <param name="httpContext">The HTTP context to match.</param>
            <returns>The result of the match.</returns>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the module.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpApplication"/> that is handling the current request.</param>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.RedirectContext(System.Web.HttpContextBase,Tasty.Http.HttpRedirectRuleMatch)">
            <summary>
            Redirects the given HTTP context to the redirect result of the given rule match.
            </summary>
            <param name="httpContext">The HTTP context to redirect.</param>
            <param name="ruleMatch">The rule match to redirect with.</param>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.ContextBeginRequest(System.Object,System.EventArgs)">
            <summary>
            Raises this module's <see cref="T:System.Web.HttpApplication"/>'s BeginRequest event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Tasty.Http.HttpRedirectModule.RuleMatcher">
            <summary>
            Gets the rule matcher used when matching rules.
            </summary>
        </member>
        <member name="T:Tasty.Http.HttpRedirectRuleMatch">
            <summary>
            Represents a matching HTTP redirect rule.
            </summary>
        </member>
        <member name="M:Tasty.Http.HttpRedirectRuleMatch.#ctor(Tasty.Configuration.HttpRedirectRuleElement,System.Text.RegularExpressions.Match)">
            <summary>
            Initializes a new instance of the HttpRedirectRuleMatch class.
            </summary>
            <param name="rule">The rule that matched.</param>
            <param name="matchResult">The result of the match.</param>
        </member>
        <member name="P:Tasty.Http.HttpRedirectRuleMatch.MatchResult">
            <summary>
            Gets the result of the match.
            </summary>
        </member>
        <member name="P:Tasty.Http.HttpRedirectRuleMatch.RedirectResult">
            <summary>
            Gets the rule's redirect URL transformed by the result of the match.
            </summary>
        </member>
        <member name="P:Tasty.Http.HttpRedirectRuleMatch.Rule">
            <summary>
            Gets the rule that matched.
            </summary>
        </member>
        <member name="T:Tasty.Http.HttpRedirectRuleMatcher">
            <summary>
            Matches URIs to <see cref="T:Tasty.Configuration.HttpRedirectRuleElement"/>s.
            </summary>
        </member>
        <member name="M:Tasty.Http.HttpRedirectRuleMatcher.Match(System.Uri,System.Collections.Generic.IEnumerable{Tasty.Configuration.HttpRedirectRuleElement})">
            <summary>
            Gets a rule matching the given request URI.
            </summary>
            <param name="requestUri">The request URI to get a matching rule for.</param>
            <param name="rules">The rule collection to use when matching.</param>
            <returns>A matching rule, or null if none was found.</returns>
        </member>
        <member name="T:Tasty.Http.HttpRedirectType">
            <summary>
            Defines the possible HTTP redirect types.
            </summary>
        </member>
        <member name="F:Tasty.Http.HttpRedirectType.Temporary">
            <summary>
            Identifies a temporary redirect (302).
            </summary>
        </member>
        <member name="F:Tasty.Http.HttpRedirectType.Permanent">
            <summary>
            Identifies a permanent redirect (301).
            </summary>
        </member>
        <member name="T:Tasty.Spreadsheets.ISpreadsheetWriter">
            <summary>
            Interface definition for spreadhseet writers.
            </summary>
        </member>
        <member name="M:Tasty.Spreadsheets.ISpreadsheetWriter.Write(Tasty.Spreadsheets.ISpreadsheetDataSet,System.String)">
            <summary>
            Writes the given <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to a spreadsheet file at the given path.
            The path's extension will be replaced by the value of this instance's <see cref="P:Tasty.Spreadsheets.ISpreadsheetWriter.Extension"/> property.
            </summary>
            <param name="dataSet">The <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to write.</param>
            <param name="path">The path to write to.</param>
        </member>
        <member name="P:Tasty.Spreadsheets.ISpreadsheetWriter.Name">
            <summary>
            Gets the display name of this <see cref="T:Tasty.Spreadsheets.ISpreadsheetWriter"/> implementation.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.ISpreadsheetWriter.Extension">
            <summary>
            Gets the file extension to use when saving files.
            </summary>
        </member>
        <member name="T:Tasty.NameValueCollections">
            <summary>
            Provides extensions and helpers for <see cref="T:System.Collections.Specialized.NameValueCollection"/>s.
            </summary>
        </member>
        <member name="M:Tasty.NameValueCollections.FillWith(System.Collections.Specialized.NameValueCollection,System.Configuration.KeyValueConfigurationCollection)">
            <summary>
            Clears and then fills the collection with the key/value pairs in the given <see cref="T:System.Configuration.KeyValueConfigurationCollection"/>.
            </summary>
            <param name="collection">The collection to fill.</param>
            <param name="configCollection">The <see cref="T:System.Configuration.KeyValueConfigurationCollection"/> to use as a fill source.</param>
        </member>
        <member name="M:Tasty.NameValueCollections.With(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Adds the given key/value pair to a copy of the collection and then returns the new collection.
            </summary>
            <param name="collection">The collection to add the key/value pair to.</param>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
            <returns>The modified collection.</returns>
        </member>
        <member name="M:Tasty.NameValueCollections.Without(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Removes the given key from a copy of the collection and then returns the new collection.
            </summary>
            <param name="collection">The collection to remove the key from.</param>
            <param name="key">The key to remove.</param>
            <returns>The modified collection.</returns>
        </member>
        <member name="T:Tasty.Spreadsheets.OdsWriter">
            <summary>
            Implements <see cref="T:Tasty.Spreadsheets.ISpreadsheetWriter"/> to write OpenDocument spreadsheets.
            </summary>
        </member>
        <member name="T:Tasty.Spreadsheets.SpreadsheetWriter">
            <summary>
            Base class for <see cref="T:Tasty.Spreadsheets.ISpreadsheetWriter"/> implementors.
            </summary>
        </member>
        <member name="M:Tasty.Spreadsheets.SpreadsheetWriter.Write(Tasty.Spreadsheets.ISpreadsheetDataSet,System.String)">
            <summary>
            Writes the given <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to a spreadsheet file at the given path.
            The path's extension will be replaced by the value of this instance's <see cref="P:Tasty.Spreadsheets.SpreadsheetWriter.Extension"/> property.
            </summary>
            <param name="dataSet">The <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to write.</param>
            <param name="path">The path to write to.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.SpreadsheetWriter.GetCellValueAsString(Tasty.Spreadsheets.ISpreadsheetDataTable,System.Int32,System.Int32)">
            <summary>
            Gets the cell at the given location as a display string based on the type of the <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataColumn"/>
            it resides in.
            </summary>
            <param name="table">The <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataTable"/> to get the cell value from.</param>
            <param name="rowIndex">The index of the row to get the cell value form.</param>
            <param name="columnIndex">The index of the column to get the cell value from.</param>
            <returns>The specified cell value as a string.</returns>
        </member>
        <member name="M:Tasty.Spreadsheets.SpreadsheetWriter.CreatePath(System.String)">
            <summary>
            Gets a path for this instance from the given path, replacing the given file extension as necessary.
            </summary>
            <param name="path">The path to create this instance's path from.</param>
            <returns>The created path.</returns>
        </member>
        <member name="P:Tasty.Spreadsheets.SpreadsheetWriter.Name">
            <summary>
            Gets the display name of this <see cref="T:Tasty.Spreadsheets.ISpreadsheetWriter"/> implementation.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.SpreadsheetWriter.Extension">
            <summary>
            Gets the file extension to use when saving files.
            </summary>
        </member>
        <member name="M:Tasty.Spreadsheets.OdsWriter.Write(Tasty.Spreadsheets.ISpreadsheetDataSet,System.String)">
            <summary>
            Writes the given <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to a spreadsheet file at the given path.
            The path's extension will be replaced by the value of this instance's <see cref="P:Tasty.Spreadsheets.OdsWriter.Extension"/> property.
            </summary>
            <param name="dataSet">The <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to write.</param>
            <param name="path">The path to write to.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.OdsWriter.CreateNamespaceLookup">
            <summary>
            Creates a namespace lookup dictionary for use by the writer.
            </summary>
            <returns>A namespace lookup dictionary.</returns>
        </member>
        <member name="M:Tasty.Spreadsheets.OdsWriter.SavePackage(System.String,System.String)">
            <summary>
            Saves an ODS package, using the content document at the given path, to the given output path.
            </summary>
            <param name="contentXmlPath">The path of the content document.</param>
            <param name="outputPath">The output path to save the package to.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.OdsWriter.WriteCell(System.Xml.XmlWriter,System.Type,System.Object)">
            <summary>
            Writes a cell.
            </summary>
            <param name="xw">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <param name="columnType">The cell's column type.</param>
            <param name="value">The cell's value.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.OdsWriter.WriteCellStyle(System.Xml.XmlWriter,System.String,System.String,System.String,System.String)">
            <summary>
            Writes a preamble cell style element.
            </summary>
            <param name="xw">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <param name="name">The style's name.</param>
            <param name="family">The style's family.</param>
            <param name="parentStyleName">The style's parent style name.</param>
            <param name="dataStyleName">The style's data style name.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.OdsWriter.WriteFontFace(System.Xml.XmlWriter,System.String,System.String,System.String,System.String)">
            <summary>
            Writes a preamble font face element.
            </summary>
            <param name="xw">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <param name="name">The font face's name.</param>
            <param name="fontFamily">The font face's font family.</param>
            <param name="fontFamilyGeneric">The font face's generic font family.</param>
            <param name="fontPitch">The font face's pitch.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.OdsWriter.WriteTableColumnDefinition(System.Xml.XmlWriter,System.String,System.String,System.String)">
            <summary>
            Writes a table column definition.
            </summary>
            <param name="xw">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <param name="styleName">The column's style name.</param>
            <param name="defaultCellStyleName">The column's default cell style name.</param>
            <param name="numberColumnsRepeated">The number of columns being defined.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.OdsWriter.WriteTableStartElement(System.Xml.XmlWriter,System.String,System.String,System.String)">
            <summary>
            Writes a table's start element.
            </summary>
            <param name="xw">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <param name="name">The table's name.</param>
            <param name="styleName">The table's style name.</param>
            <param name="print">The table's print value.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.OdsWriter.WriteTableStyle(System.Xml.XmlWriter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Writes a preamble table style element.
            </summary>
            <param name="xw">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <param name="name">The style's name.</param>
            <param name="family">The style's family.</param>
            <param name="masterPageName">The style's master page name.</param>
            <param name="display">The style's display value.</param>
            <param name="writingMode">The style's writing mode.</param>
        </member>
        <member name="P:Tasty.Spreadsheets.OdsWriter.Name">
            <summary>
            Gets the display name of this <see cref="T:Tasty.Spreadsheets.ISpreadsheetWriter"/> implementation.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.OdsWriter.Extension">
            <summary>
            Gets the file extension to use when saving files.
            </summary>
        </member>
        <member name="T:Tasty.Primitives">
            <summary>
            Provides extensions and helpers for primitive and built-in types.
            </summary>
        </member>
        <member name="M:Tasty.Primitives.CopyProperties(System.Object,System.Object)">
            <summary>
            Copies any same-named property values from the source object to the destination object.
            Each destination property must be of a type that is assignable from the type
            of the corresponding source property.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="destination">The destination object to copy properties to.</param>
        </member>
        <member name="M:Tasty.Primitives.EnumFromDescription``1(System.String)">
            <summary>
            Parses an enum from the given description or member name.
            </summary>
            <typeparam name="T">The type of the enum to parse.</typeparam>
            <param name="value">The enum member name or description value to parse.</param>
            <returns>The parsed enum.</returns>
        </member>
        <member name="M:Tasty.Primitives.EnumFromDescription(System.String,System.Type)">
            <summary>
            Parses an enum from the given description or member name.
            </summary>
            <param name="value">The enum member name or description value to parse.</param>
            <param name="enumType">The type of the enum to parse.</param>
            <returns>The parsed enum.</returns>
        </member>
        <member name="M:Tasty.Primitives.FromJson(System.Type,System.String)">
            <summary>
            De-serializes a string of JSON into an object of the given type.
            </summary>
            <param name="type">The type of object to de-serialize the given JSON into.</param>
            <param name="value">A string of JSON to de-serialize.</param>
            <returns>The de-serialized object.</returns>
        </member>
        <member name="M:Tasty.Primitives.FromJson(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            De-serializes a string of JSON into an object of the given type.
            </summary>
            <param name="type">The type of object to de-serialize the given JSON into.</param>
            <param name="value">A string of JSON to de-serialize.</param>
            <param name="knownTypes">A collection of known types the serializer may encounter in the object graph.</param>
            <returns>The de-serialized object.</returns>
        </member>
        <member name="M:Tasty.Primitives.FromJson(System.Type,System.String,System.Text.Encoding,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            De-serializes a string of JSON into an object of the given type.
            </summary>
            <param name="type">The type of object to de-serialize the given JSON into.</param>
            <param name="value">A string of JSON to de-serialize.</param>
            <param name="encoding">The encoding the JSON string is in.</param>
            <param name="knownTypes">A collection of known types the serializer may encounter in the object graph.</param>
            <returns>The de-serialized object.</returns>
        </member>
        <member name="M:Tasty.Primitives.RaiseEvent(System.Object,System.EventHandler,System.EventArgs)">
            <summary>
            Safely raises an event on an object by first checking if the handler is null.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="handler">The event delegate.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Tasty.Primitives.RaiseEvent``1(System.Object,System.EventHandler{``0},``0)">
            <summary>
            Safely raises an event on an object by first checking if the handler is null.
            </summary>
            <typeparam name="T">The type of the event arguments for the generic event being raised.</typeparam>
            <param name="sender">The event sender.</param>
            <param name="handler">The event delegate.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Tasty.Primitives.ToDescription(System.Enum)">
            <summary>
            Gets the string representation of the enum value, substituting its
            description attribute value if set.
            </summary>
            <param name="value">The enum to get the description of.</param>
            <returns>An enum description.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToFileSize(System.Int64)">
            <summary>
            Converts a length of bytes to a friendly file size string.
            </summary>
            <param name="bytes">The bytes length to convert.</param>
            <returns>A friendly file size string.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToIso8601UtcString(System.DateTime)">
            <summary>
            Returns a string representation of the given DateTime object
            that conforms to ISO 8601 (in UTC).
            </summary>
            <param name="dateTime">The DateTime object to convert.</param>
            <returns>A string representing the date in ISO 8601 format.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToIso8601UtcPathSafeString(System.DateTime)">
            <summary>
            Returns a string representation of the given DateTime object
            that conforms to ISO 8601 (in UTC), replacing colons and periods
            with dashes for use in filenames.
            </summary>
            <param name="dateTime">The DateTime object to convert.</param>
            <returns>A string representing the date in ISO 8601 format with unsaf path characters removed.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToJson``1(``0)">
            <summary>
            Serializes the given object to a JSON string.
            </summary>
            <typeparam name="T">The type of the object being serialized.</typeparam>
            <param name="value">The object to serialize.</param>
            <returns>A string of JSON.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToJson``1(``0,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Serializes the given object to a JSON string.
            </summary>
            <typeparam name="T">The type of the object being serialized.</typeparam>
            <param name="value">The object to serialize.</param>
            <param name="knownTypes">A collection of known types to feed the serializer that may be found in the object graph.</param>
            <returns>A string of JSON.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToJson(System.Type,System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Serializes the given object to a JSON string.
            </summary>
            <param name="type">The type of the object being serialized.</param>
            <param name="value">The object to serialize.</param>
            <param name="knownTypes">A collection of known types to feed the serializer that may be found in the object graph.</param>
            <returns>A string of JSON.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToPageCount(System.Int32,System.Int32)">
            <summary>
            Gets the number of pages the record count is spread across for the given page size.
            </summary>
            <param name="recordCount">The record count to get the page count for.</param>
            <param name="pageSize">The page size.</param>
            <returns>The page count for the give record count and page size.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToPrettyString(System.TimeSpan)">
            <summary>
            Formats the given <see cref="T:System.TimeSpan"/> into a pretty time string.
            Example: 3d 6h or 4h 36m or 12m 17s or 2.8s
            </summary>
            <param name="timeSpan">The <see cref="T:System.TimeSpan"/> to format.</param>
            <returns>The format result.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToRelativeString(System.DateTime)">
            <summary>
            Gets the difference between now and the given date as a relative duration string.
            </summary>
            <param name="value">The date value to get the relative string of.</param>
            <returns>A pretty, relative duration string.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToSpreadsheetColumnName(System.Int32)">
            <summary>
            Gets the spreadhseet column name (i.e., A or AB or EF) for the given column number.
            </summary>
            <param name="columnNumber">The column number (the first column is 1, not 0).</param>
            <returns>The spreadsheet column name.</returns>
        </member>
        <member name="M:Tasty.Primitives.TypeNameWithoutAssembly(System.String)">
            <summary>
            Gets the type name from the give type name string without any assembly information.
            </summary>
            <param name="typeName">The type name string to pull the bare type name from.</param>
            <returns>A type name.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when typeName is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when typeName doesn't represent a valid type string.</exception>
        </member>
        <member name="M:Tasty.Primitives.MatchTypeName(System.String)">
            <summary>
            Gets the regular expression match for the given type name.
            </summary>
            <param name="typeName">The type name to get the regular expression match for.</param>
            <returns>A regular expression match.</returns>
        </member>
        <member name="T:Tasty.TastyFileSystemWatcher">
            <summary>
            Wraps a <see cref="T:System.IO.FileSystemWatcher"/> object to filter and raise
            a single event for each path that triggers a rapid series of events.
            </summary>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.#ctor">
            <summary>
            Initializes a new instance of the TastyFileSystemWatcher class.
            </summary>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TastyFileSystemWatcher class.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TastyFileSystemWatcher class.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.Dispose">
            <summary>
            Releases all resources used by this instance.
            </summary>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this instance.
            </summary>
            <param name="disposing">A value indicating whether explicitly disposing.</param>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.EnqueueEvent(System.String,Tasty.TastyFileSystemEventType,System.IO.FileSystemEventArgs)">
            <summary>
            Enqueues and possibly throttles an event for raising.
            </summary>
            <param name="path">The path that raised the original event.</param>
            <param name="eventType">The type of the original event that was raised.</param>
            <param name="e">The arguments passed when the original event was raised.</param>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.Initialize">
            <summary>
            Performs initialization.
            </summary>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.InnerWatcherChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Raises the innerWatcher's Changed event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.InnerWatcherCreated(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Raises the innerWatcher's Created event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.InnerWatcherDeleted(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Raises the innerWatcher's Deleted event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.InnerWatcherDisposed(System.Object,System.EventArgs)">
            <summary>
            Raises the innerWatcher's Disposed event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.InnerWatcherError(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Raises the innerWatcher's Error event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.InnerWatcherRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Raises the innerWatcher's Renamed event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.RaiseEvent(Tasty.TastyFileSystemWatcher.PathEventItem)">
            <summary>
            Raises a throttled event to any listeners of this instance.
            </summary>
            <param name="item">The identifying the event to raise.</param>
        </member>
        <member name="E:Tasty.TastyFileSystemWatcher.Changed">
            <summary>
            Occurrs when a file or directory in the specified <see cref="P:Tasty.TastyFileSystemWatcher.Path"/> is changed.
            </summary>
        </member>
        <member name="E:Tasty.TastyFileSystemWatcher.Created">
            <summary>
            Occurrs when a file or directory in the specified <see cref="P:Tasty.TastyFileSystemWatcher.Path"/> is created.
            </summary>
        </member>
        <member name="E:Tasty.TastyFileSystemWatcher.Deleted">
            <summary>
            Occurrs when a file or directory in the specified <see cref="P:Tasty.TastyFileSystemWatcher.Path"/> is deleted.
            </summary>
        </member>
        <member name="E:Tasty.TastyFileSystemWatcher.Disposed">
            <summary>
            Occurs when the component is disposed by a call to the <see cref="M:Tasty.TastyFileSystemWatcher.Dispose"/> method.
            </summary>
        </member>
        <member name="E:Tasty.TastyFileSystemWatcher.Error">
            <summary>
            Occurs when the internal buffer overflows.
            </summary>
        </member>
        <member name="E:Tasty.TastyFileSystemWatcher.Operation">
            <summary>
            Occurs whenever any of the <see cref="E:Tasty.TastyFileSystemWatcher.Changed"/>, <see cref="E:Tasty.TastyFileSystemWatcher.Created"/>, <see cref="E:Tasty.TastyFileSystemWatcher.Deleted"/> or <see cref="E:Tasty.TastyFileSystemWatcher.Renamed"/>
            events occur.
            </summary>
        </member>
        <member name="E:Tasty.TastyFileSystemWatcher.Renamed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:Tasty.TastyFileSystemWatcher.Path"/> is renamed.
            </summary>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.EnableRaisingEvents">
            <summary>
            Gets or sets a value indicating whether the component is enabled.
            </summary>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.Filter">
            <summary>
            Gets or sets the filter string used to determine what files are monitored in a directory.
            </summary>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.IncludeSubdirectories">
            <summary>
            Gets or sets a value indicating whether subdirectories within the specified path should be monitored.
            </summary>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.InternalBufferSize">
            <summary>
            Gets or sets the size of the internal buffer.
            </summary>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.Mode">
            <summary>
            Gets or sets the mode this instance should operate in.
            </summary>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.NotifyFilter">
            <summary>
            Gets or sets the type of changes to watch for.
            </summary>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.Path">
            <summary>
            Gets or sets the path of the directory to watch.
            </summary>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.Threshold">
            <summary>
            Gets or sets the threashold, in miliseconds, that determins the window
            in which a file system event can be thought of as a "single" event.
            Defaults to 500ms, so all changes happening with 500ms of each other count
            as a single event.
            </summary>
        </member>
        <member name="T:Tasty.TastyFileSystemWatcher.PathEventItem">
            <summary>
            Represents a path and its metadata in relation to <see cref="T:System.IO.FileSystemWatcher"/> events.
            </summary>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.PathEventItem.#ctor">
            <summary>
            Initializes a new instance of the PathEventItem class.
            </summary>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.PathEventItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the PathEventItem class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to load data from..</param>
            <param name="context">The source <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization.</param>
        </member>
        <member name="M:Tasty.TastyFileSystemWatcher.PathEventItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>  with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization.</param>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.PathEventItem.LastRaised">
            <summary>
            Gets or sets the date the last event for this path was raised.
            </summary>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.PathEventItem.PublishEventArgs">
            <summary>
            Gets or sets the arguments to raise the event to publish with.
            </summary>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.PathEventItem.PublishEventType">
            <summary>
            Gets or sets the type of event to publish.
            </summary>
        </member>
        <member name="P:Tasty.TastyFileSystemWatcher.PathEventItem.RaisedCount">
            <summary>
            Gets or sets the number of times a file system event has been raised for this path.
            </summary>
        </member>
        <member name="T:Tasty.TastyFileSystemWatcherMode">
            <summary>
            Defines the possible <see cref="T:Tasty.TastyFileSystemWatcher"/> modes.
            </summary>
        </member>
        <member name="F:Tasty.TastyFileSystemWatcherMode.Directory">
            <summary>
            Identifies that only one event per batch should be raised
            on the entire directory being watched. The first event raised
            by any of the files in the directory will be published.
            TastyFileSystemWatcher.Threshold may need to be set to a fairly
            large value for this mode to behave as expected.
            </summary>
        </member>
        <member name="F:Tasty.TastyFileSystemWatcherMode.IndividualFiles">
            <summary>
            Identifies that the standard event behavior should be used,
            except that each file operation will only raise a single event
            during the threshold window.
            </summary>
        </member>
        <member name="T:Tasty.GitHub.GitHubWebhook">
            <summary>
            Represents a GitHub post-receive webhook.
            </summary>
        </member>
        <member name="M:Tasty.GitHub.GitHubWebhook.Deserialize(System.String)">
            <summary>
            De-serializes the given JSON string into a <see cref="T:Tasty.GitHub.GitHubWebhook"/>.
            </summary>
            <param name="value">The string value to de-serialize.</param>
            <returns>The de-serialized <see cref="T:Tasty.GitHub.GitHubWebhook"/>.</returns>
        </member>
        <member name="M:Tasty.GitHub.GitHubWebhook.Deserialize(System.IO.Stream)">
            <summary>
            De-serializes the given stream of JSON into a <see cref="T:Tasty.GitHub.GitHubWebhook"/>.
            </summary>
            <param name="stream">The stream to de-serialize.</param>
            <returns>The de-serialized <see cref="T:Tasty.GitHub.GitHubWebhook"/>.</returns>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhook.After">
            <summary>
            Gets or sets the commit ID of the ref after the last commit.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhook.Before">
            <summary>
            Gets or sets the commit ID of the ref before the first commit.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhook.Commits">
            <summary>
            Gets or sets the commits that make up the push.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhook.Ref">
            <summary>
            Gets or sets the ref that was pushed.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhook.Repository">
            <summary>
            Gets or sets the repository that the push was for.
            </summary>
        </member>
        <member name="T:Tasty.GitHub.GitHubWebhookPerson">
            <summary>
            Represents an author in a GitHub webhook.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookPerson.Email">
            <summary>
            Gets or sets the author's email.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookPerson.Name">
            <summary>
            Gets or sets the author's name.
            </summary>
        </member>
        <member name="T:Tasty.GitHub.GitHubWebhookCommit">
            <summary>
            Represents a commit in a GitHub webhook.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookCommit.Added">
            <summary>
            Gets or sets the collection of added paths.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookCommit.Author">
            <summary>
            Gets or sets the commit author.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookCommit.Id">
            <summary>
            Gets or sets the commit ID.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookCommit.Message">
            <summary>
            Gets or sets the commit message.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookCommit.Modified">
            <summary>
            Gets or sets the collection of modified paths.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookCommit.Removed">
            <summary>
            Gets or sets the collection of removed paths.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookCommit.Timestamp">
            <summary>
            Gets or sets the commit timestamp.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookCommit.TimestampParsed">
            <summary>
            Gets the value of <see cref="P:Tasty.GitHub.GitHubWebhookCommit.Timestamp"/> parsed as a <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookCommit.Url">
            <summary>
            Gets or sets the commit URL.
            </summary>
        </member>
        <member name="T:Tasty.GitHub.GitHubWebhookRepository">
            <summary>
            Represents a repository in a GitHub webhook.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookRepository.Description">
            <summary>
            Gets or sets the repository's description.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookRepository.Forks">
            <summary>
            Gets or sets the number of forks the repository has.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookRepository.Homepage">
            <summary>
            Gets or sets the repository's homepage.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookRepository.Name">
            <summary>
            Gets or sets the name of the repository.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookRepository.Owner">
            <summary>
            Gets or sets the repository's owner.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookRepository.Plegie">
            <summary>
            Gets or sets the repository's pledge ID.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookRepository.Private">
            <summary>
            Gets or sets a value indicating whether the repository is private.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookRepository.Url">
            <summary>
            Gets or sets the repository's URL.
            </summary>
        </member>
        <member name="P:Tasty.GitHub.GitHubWebhookRepository.Watchers">
            <summary>
            Gets or sets the number of watchers the repository has.
            </summary>
        </member>
        <member name="T:Tasty.TimeZoneRequest">
            <summary>
            Constructs and performs timezone requests.
            </summary>
        </member>
        <member name="F:Tasty.TimeZoneRequest.ServiceUri">
            <summary>
            Gets the URI of the timezone service.
            </summary>
        </member>
        <member name="M:Tasty.TimeZoneRequest.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the TimeZoneRequest class.
            </summary>
            <param name="latitude">The latitude to create the request for.</param>
            <param name="longitude">The longitude to create the request for.</param>
        </member>
        <member name="M:Tasty.TimeZoneRequest.#ctor(Tasty.Web.QueryString)">
            <summary>
            Initializes a new instance of the TimeZoneRequest class.
            </summary>
            <param name="query">The query string to initialize the request's URI with.</param>
        </member>
        <member name="M:Tasty.TimeZoneRequest.CreateRequestUri(System.Decimal,System.Decimal)">
            <summary>
            Creates a new <see cref="T:Tasty.TimeZoneRequest"/> URI from the given latitude and longitude.
            </summary>
            <param name="latitude">The latitude to create the URI with.</param>
            <param name="longitude">The longitude to create the URI with.</param>
            <returns>A <see cref="T:Tasty.TimeZoneRequest"/> URI.</returns>
        </member>
        <member name="M:Tasty.TimeZoneRequest.CreateRequestUri(Tasty.Web.QueryString)">
            <summary>
            Creates a new <see cref="T:Tasty.TimeZoneRequest"/> URI from the given query string.
            </summary>
            <param name="query">The query string to create the URI with.</param>
            <returns>A <see cref="T:Tasty.TimeZoneRequest"/> URI.</returns>
        </member>
        <member name="M:Tasty.TimeZoneRequest.Make(System.Decimal,System.Decimal)">
            <summary>
            Makes a timezone request and parses the result for the given latitude and longitude.
            </summary>
            <param name="latitude">The latitude to create the request for.</param>
            <param name="longitude">The longitude to create the request for.</param>
            <returns>The result of the request.</returns>
        </member>
        <member name="M:Tasty.TimeZoneRequest.GetResponse">
            <summary>
            Gets this instance's response.
            </summary>
            <returns>A response.</returns>
        </member>
        <member name="M:Tasty.TimeZoneRequest.GetResponseAsync(System.Action{Tasty.TimeZoneResponse})">
            <summary>
            Gets this instance's response asynchronously.
            </summary>
            <param name="callback">A method to be called when the operation completes.</param>
        </member>
        <member name="M:Tasty.TimeZoneRequest.CreateResponse(System.Net.HttpWebResponse)">
            <summary>
            Creates a <see cref="T:Tasty.TimeZoneResponse"/> from the given <see cref="T:System.Net.HttpWebResponse"/>.
            </summary>
            <param name="webResponse">The web response to create the time zone response from.</param>
            <returns>The created time zone response.</returns>
        </member>
        <member name="P:Tasty.TimeZoneRequest.Latitude">
            <summary>
            Gets the latitude being used to create a request by this instance.
            </summary>
        </member>
        <member name="P:Tasty.TimeZoneRequest.Longitude">
            <summary>
            Gets the longitude being used to create a request by this instance.
            </summary>
        </member>
        <member name="P:Tasty.TimeZoneRequest.RequestUri">
            <summary>
            Gets the request URI generated by this instance.
            </summary>
        </member>
        <member name="T:Tasty.TimeZoneResponse">
            <summary>
            Represents the response to a <see cref="T:Tasty.TimeZoneRequest"/>.
            </summary>
        </member>
        <member name="M:Tasty.TimeZoneResponse.#ctor">
            <summary>
            Initializes a new instance of the TimeZoneResponse class.
            </summary>
        </member>
        <member name="M:Tasty.TimeZoneResponse.FromXml(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:Tasty.TimeZoneResponse"/> from the given XML stream.
            </summary>
            <param name="stream">The stream to create the response from.</param>
            <returns>The created response.</returns>
        </member>
        <member name="P:Tasty.TimeZoneResponse.Status">
            <summary>
            Gets the status of the request call.
            </summary>
        </member>
        <member name="P:Tasty.TimeZoneResponse.TimeZone">
            <summary>
            Gets the response timezone.
            </summary>
        </member>
        <member name="T:Tasty.TimeZoneCallResult">
            <summary>
            Represents the result of an encapsulated timezone request/response call.
            </summary>
        </member>
        <member name="P:Tasty.TimeZoneCallResult.Status">
            <summary>
            Gets or sets the status of the call.
            </summary>
        </member>
        <member name="P:Tasty.TimeZoneCallResult.TimeZone">
            <summary>
            Gets or sets the timezone that was returned in the response.
            </summary>
        </member>
        <member name="T:Tasty.TimeZoneCallStatus">
            <summary>
            Defines the possible <see cref="T:Tasty.TimeZoneResponse"/> status codes.
            </summary>
        </member>
        <member name="F:Tasty.TimeZoneCallStatus.AuthorizationException">
            <summary>
            Indicates that the request was not authorized.
            </summary>
        </member>
        <member name="F:Tasty.TimeZoneCallStatus.Unknown">
            <summary>
            Indicates an unkown error caused the request to fail.
            </summary>
        </member>
        <member name="F:Tasty.TimeZoneCallStatus.Timeout">
            <summary>
            Indicates that the database reuqest timed out.
            </summary>
        </member>
        <member name="F:Tasty.TimeZoneCallStatus.InvalidParameter">
            <summary>
            Indicates that the latitude or longitude parameters are invalid
            </summary>
        </member>
        <member name="F:Tasty.TimeZoneCallStatus.NotFound">
            <summary>
            Indicates that a time zone could not be found for the given coordinates
            </summary>
        </member>
        <member name="F:Tasty.TimeZoneCallStatus.Success">
            <summary>
            Indicates a successful request.
            </summary>
        </member>
        <member name="T:Tasty.Web.HttpContexts">
            <summary>
            Provides extensions to <see cref="T:System.Web.HttpContext"/> and <see cref="T:System.Web.HttpContextBase"/>.
            </summary>
        </member>
        <member name="M:Tasty.Web.HttpContexts.ResolveUrl(System.Web.HttpContext,System.String)">
            <summary>
            Resolves a URL string using the given HTTP context. The URL can be absolute (e.g., /some/path) or
            application-relative (e.g., ~/some/path).
            </summary>
            <param name="httpContext">The HTTP context to use when resolving the URL.</param>
            <param name="url">The URL to resolve.</param>
            <returns>A resolved URL string.</returns>
        </member>
        <member name="M:Tasty.Web.HttpContexts.ResolveUrl(System.Web.HttpContext,System.String,System.Boolean)">
            <summary>
            Resolves a URL string using the given HTTP context. The URL can be absolute (e.g., /some/path) or
            application-relative (e.g., ~/some/path).
            </summary>
            <param name="httpContext">The HTTP context to use when resolving the URL.</param>
            <param name="url">The URL to resolve.</param>
            <param name="fullyQualify">A value indicating whether to fully qualify the URL.</param>
            <returns>A resolved URL string.</returns>
        </member>
        <member name="M:Tasty.Web.HttpContexts.ResolveUrl(System.Web.HttpContext,System.String,System.Boolean,System.Boolean)">
            <summary>
            Resolves a URL string using the given HTTP context. The URL can be absolute (e.g., /some/path) or
            application-relative (e.g., ~/some/path).
            </summary>
            <param name="httpContext">The HTTP context to use when resolving the URL.</param>
            <param name="url">The URL to resolve.</param>
            <param name="fullyQualify">A value indicating whether to fully qualify the URL.</param>
            <param name="forceSsl">A value indicating whether to force the resolved URL to use SSL, even if
            the HTTP context's request does not. Leave false to use the same scheme as the HTTP context's request.</param>
            <returns>A resolved URL string.</returns>
        </member>
        <member name="M:Tasty.Web.HttpContexts.ResolveUrl(System.Web.HttpContextBase,System.String)">
            <summary>
            Resolves a URL string using the given HTTP context. The URL can be absolute (e.g., /some/path) or
            application-relative (e.g., ~/some/path).
            </summary>
            <param name="httpContext">The HTTP context to use when resolving the URL.</param>
            <param name="url">The URL to resolve.</param>
            <returns>A resolved URL string.</returns>
        </member>
        <member name="M:Tasty.Web.HttpContexts.ResolveUrl(System.Web.HttpContextBase,System.String,System.Boolean)">
            <summary>
            Resolves a URL string using the given HTTP context. The URL can be absolute (e.g., /some/path) or
            application-relative (e.g., ~/some/path).
            </summary>
            <param name="httpContext">The HTTP context to use when resolving the URL.</param>
            <param name="url">The URL to resolve.</param>
            <param name="fullyQualify">A value indicating whether to fully qualify the URL.</param>
            <returns>A resolved URL string.</returns>
        </member>
        <member name="M:Tasty.Web.HttpContexts.ResolveUrl(System.Web.HttpContextBase,System.String,System.Boolean,System.Boolean)">
            <summary>
            Resolves a URL string using the given HTTP context. The URL can be absolute (e.g., /some/path) or
            application-relative (e.g., ~/some/path).
            </summary>
            <param name="httpContext">The HTTP context to use when resolving the URL.</param>
            <param name="url">The URL to resolve.</param>
            <param name="fullyQualify">A value indicating whether to fully qualify the URL.</param>
            <param name="forceSsl">A value indicating whether to force the resolved URL to use SSL, even if
            the HTTP context's request does not. Leave false to use the same scheme as the HTTP context's request.</param>
            <returns>A resolved URL string.</returns>
        </member>
        <member name="M:Tasty.Web.HttpContexts.IsFullyQualifiedUrl(System.String)">
            <summary>
            Gets a value indicating whether the given URL string is a fully qualified.
            </summary>
            <param name="url">The URL to check.</param>
            <returns>True if hte URL is fully qualified, false otherwise.</returns>
        </member>
        <member name="T:Tasty.Web.QueryStringMergeMode">
            <summary>
            Defines the possible modes a querystring merge operation can be performed in.
            </summary>
        </member>
        <member name="F:Tasty.Web.QueryStringMergeMode.SkipExisting">
            <summary>
            Identifies that any existing keys in the destination query string are left untouched.
            </summary>
        </member>
        <member name="F:Tasty.Web.QueryStringMergeMode.AddToExisting">
            <summary>
            Identifies that all keys are added to the desintation query string,
            possibly resulting in duplicate keys and even duplicate values.
            </summary>
        </member>
        <member name="F:Tasty.Web.QueryStringMergeMode.OverwriteExisting">
            <summary>
            Identifies that any existing keys in the destination are overwritten 
            by the values found in the source.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore">
            <summary>
            Implements <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to persist <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>s
            to the current <see cref="P:System.Web.HttpRuntime.Cache"/>.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.IUrlTokenStore">
            <summary>
            Interface definition for persistent URL token stores.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenStore.CleanExpiredUrlTokens">
            <summary>
            Cleans all expired token records from the store.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenStore.CreateUrlToken(Tasty.Web.UrlTokens.UrlTokenRecord)">
            <summary>
            Creates a new URL token record.
            </summary>
            <param name="record">The URL token record to create.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenStore.GetUrlToken(System.String)">
            <summary>
            Gets a URL token record.
            </summary>
            <param name="key">The key of the record to get.</param>
            <returns>The URL token record identified by the given key.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore.CleanExpiredUrlTokens">
            <summary>
            Cleans all expired token records from the store.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore.CreateUrlToken(Tasty.Web.UrlTokens.UrlTokenRecord)">
            <summary>
            Creates a new URL token record.
            </summary>
            <param name="record">The URL token record to create.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore.GetUrlToken(System.String)">
            <summary>
            Gets a URL token record.
            </summary>
            <param name="key">The key of the record to get.</param>
            <returns>The URL token record identified by the given key.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore.SaveDictionary(System.Collections.Generic.IDictionary{System.String,Tasty.Web.UrlTokens.UrlTokenRecord})">
            <summary>
            Saves the updated storage dictionary to the current <see cref="P:System.Web.HttpRuntime.Cache"/>.
            Before saving, the dictionary is cleaned of any expired records.
            </summary>
            <param name="dictionary">The dictionary to save.</param>
        </member>
        <member name="P:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore.Dictionary">
            <summary>
            Gets the storage dictionary from the current <see cref="P:System.Web.HttpRuntime.Cache"/>,
            creating it if it doesn't exist.
            </summary>
            <returns>The storage dictionary.</returns>
        </member>
        <member name="T:Tasty.Web.UrlTokens.IUrlToken">
            <summary>
            Defines the interface for URL tokens.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlToken.GenerateKey">
            <summary>
            Generates a new unique key that can be used to identify the URL token.
            </summary>
            <returns>A unique token identifier.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlToken.Serialize">
            <summary>
            Serializes the URL token for storage.
            </summary>
            <returns>The serialized URL token data.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlToken.ToUrlTokenRecord">
            <summary>
            Creates a <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/> from this instance.
            </summary>
            <returns>A <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/> representing this instance.</returns>
        </member>
        <member name="P:Tasty.Web.UrlTokens.IUrlToken.Expires">
            <summary>
            Gets or sets a value indicating when the token expires, in UTC.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.IUrlToken.ExpiryHours">
            <summary>
            Gets the number of hours from creation the URL token expires in.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.IUrlToken.IsExpired">
            <summary>
            Gets a value indicating whether the token is expired.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1">
            <summary>
            Interface definition for URL providers for <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>s.
            </summary>
            <typeparam name="TToken">The type of <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to provide URLs for.</typeparam>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1.TokenFromUrl(System.Uri)">
            <summary>
            Parses a <see cref="T:System.Uri"/> into a <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> using the <see cref="P:Tasty.Web.UrlTokens.UrlTokenStore.Current"/>
            <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to parse.</param>
            <returns>The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> identified by the given <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1.TokenFromUrl(System.Uri,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Parses a <see cref="T:System.Uri"/> into a <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to parse.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when loading token data.</param>
            <returns>The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> identified by the given <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1.UrlFromToken(`0)">
            <summary>
            Generates a <see cref="T:System.Uri"/> from the given <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> using the <see cref="P:Tasty.Web.UrlTokens.UrlTokenStore.Current"/>
            <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/>.
            </summary>
            <param name="token">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to generate the <see cref="T:System.Uri"/> from.</param>
            <returns>The generated <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1.UrlFromToken(`0,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Generates a <see cref="T:System.Uri"/> from the given <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="token">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to generate the <see cref="T:System.Uri"/> from.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when saving token data.</param>
            <returns>The generated <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="T:Tasty.Web.UrlTokens.PostgresUrlTokenStore">
            <summary>
            Implements <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to persist <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>s to PostgreSQL.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.SqlUrlTokenStore">
            <summary>
            Base class for <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> implementors that use a connection string to connect to a database.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlUrlTokenStore.#ctor">
            <summary>
            Initializes a new instance of the SqlUrlTokenStore class.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlUrlTokenStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlUrlTokenStore class.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlUrlTokenStore.EnsureConnectionString">
            <summary>
            Ensures that a connection string is configured.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Tasty.Web.UrlTokens.SqlUrlTokenStore.ConnectionString">
            <summary>
            Gets or sets the connection string to use when connecting to the database.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.PostgresUrlTokenStore.#ctor">
            <summary>
            Initializes a new instance of the PostgresUrlTokenStore class.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.PostgresUrlTokenStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PostgresUrlTokenStore class.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.PostgresUrlTokenStore.CleanExpiredUrlTokens">
            <summary>
            Cleans all expired token records from the store.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.PostgresUrlTokenStore.CreateUrlToken(Tasty.Web.UrlTokens.UrlTokenRecord)">
            <summary>
            Creates a new URL token record.
            </summary>
            <param name="record">The URL token record to create.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.PostgresUrlTokenStore.GetUrlToken(System.String)">
            <summary>
            Gets a URL token record.
            </summary>
            <param name="key">The key of the record to get.</param>
            <returns>The URL token record identified by the given key.</returns>
        </member>
        <member name="T:Tasty.Web.QueryString">
            <summary>
            Represents a URL query string as a key/value collection.
            </summary>
        </member>
        <member name="M:Tasty.Web.QueryString.#ctor">
            <summary>
            Initializes a new instance of the QueryString class.
            </summary>
        </member>
        <member name="M:Tasty.Web.QueryString.FromUrl(System.Uri)">
            <summary>
            Parses a <see cref="T:Tasty.Web.QueryString"/> from the given <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to the query of.</param>
            <returns>The parsed <see cref="T:Tasty.Web.QueryString"/> object.</returns>
        </member>
        <member name="M:Tasty.Web.QueryString.Parse(System.String)">
            <summary>
            Parses the given query string into a <see cref="T:Tasty.Web.QueryString"/> instance.
            </summary>
            <param name="query">The query string to parse.</param>
            <returns>The parsed <see cref="T:Tasty.Web.QueryString"/> object.</returns>
        </member>
        <member name="M:Tasty.Web.QueryString.Add(System.String,System.String)">
            <summary>
            Adds a value to the query string for the specified key.
            </summary>
            <param name="key">The key to add the value for.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Tasty.Web.QueryString.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the given set of values to the query string for the specified key.
            </summary>
            <param name="key">The key to add the values for.</param>
            <param name="values">The set of values to add.</param>
        </member>
        <member name="M:Tasty.Web.QueryString.Get(System.String)">
            <summary>
            Gets the value for the specified key.
            </summary>
            <param name="key">The key to get the value for.</param>
            <returns>The key's value.</returns>
        </member>
        <member name="M:Tasty.Web.QueryString.GetAll(System.String)">
            <summary>
            Gets a collection of all values for the specified key.
            </summary>
            <param name="key">The key to get values for.</param>
            <returns>A collection of all of the key's values.</returns>
        </member>
        <member name="M:Tasty.Web.QueryString.Merge(Tasty.Web.QueryString,Tasty.Web.QueryStringMergeMode)">
            <summary>
            Merges this query string (as the destination) with the given source query string.
            </summary>
            <param name="source">The source query string to merge into this query string.</param>
            <param name="mode">The merge mode to use.</param>
        </member>
        <member name="M:Tasty.Web.QueryString.Remove(System.String)">
            <summary>
            Removes the specified key and its value(s) from the query string.
            </summary>
            <param name="key">The key to remove.</param>
        </member>
        <member name="M:Tasty.Web.QueryString.Set(System.String,System.String)">
            <summary>
            Sets the value in the query string for the specified key.
            </summary>
            <param name="key">The key to set the value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Tasty.Web.QueryString.SetAll(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets all of the values in the given collection for the specified key.
            </summary>
            <param name="key">The key to set the values for.</param>
            <param name="values">The value collection to set.</param>
        </member>
        <member name="M:Tasty.Web.QueryString.ToOrderedDescendingString">
            <summary>
            Converts this instance into an ordered URL-encoded query string,
            sorted in descending order.
            </summary>
            <returns>A URL-encoded query string.</returns>
        </member>
        <member name="M:Tasty.Web.QueryString.ToOrderedString">
            <summary>
            Converts this instance into an ordered URL-encoded query string,
            sorted in ascending order.
            </summary>
            <returns>A URL-encoded query string.</returns>
        </member>
        <member name="M:Tasty.Web.QueryString.ToString">
            <summary>
            Converts this instance to a URL-encoded query string.
            This method is equivalent to <see cref="M:Tasty.Web.QueryString.ToOrderedString"/>.
            </summary>
            <returns>A URL-encoded query string.</returns>
        </member>
        <member name="M:Tasty.Web.QueryString.ToOrderedString(System.Boolean)">
            <summary>
            Converts this instance into an ordered URL-encoded query string.
            </summary>
            <param name="descending">A value indicating whether to sort in descending order.</param>
            <returns>A URL-encoded query string.</returns>
        </member>
        <member name="P:Tasty.Web.QueryString.Keys">
            <summary>
            Gets a collection of all of the keys in the query string.
            </summary>
        </member>
        <member name="P:Tasty.Web.QueryString.Item(System.String)">
            <summary>
            Gets or sets the value for the specified key.
            </summary>
            <param name="key">The key to get or set the value for.</param>
            <returns>The key's value.</returns>
        </member>
        <member name="T:Tasty.Web.UrlTokens.QueryStringUrlTokenUrlProvider`1">
            <summary>
            Extends <see cref="T:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1"/> for URL tokens in the query string.
            </summary>
            <typeparam name="TToken">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> type to provide URLs for.</typeparam>
        </member>
        <member name="T:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1">
            <summary>
            Base <see cref="T:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1"/> implementation.
            </summary>
            <typeparam name="TToken">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> type to provide URLs for.</typeparam>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1.TokenFromUrl(System.Uri)">
            <summary>
            Parses a <see cref="T:System.Uri"/> into a <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> using the <see cref="P:Tasty.Web.UrlTokens.UrlTokenStore.Current"/>
            <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to parse.</param>
            <returns>The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> identified by the given <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1.TokenFromUrl(System.Uri,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Parses a <see cref="T:System.Uri"/> into a <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to parse.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when loading token data.</param>
            <returns>The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> identified by the given <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1.UrlFromToken(`0)">
            <summary>
            Generates a <see cref="T:System.Uri"/> from the given <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> using the <see cref="P:Tasty.Web.UrlTokens.UrlTokenStore.Current"/>
            <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/>.
            </summary>
            <param name="token">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to generate the <see cref="T:System.Uri"/> from.</param>
            <returns>The generated <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1.UrlFromToken(`0,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Generates a <see cref="T:System.Uri"/> from the given <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="token">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to generate the <see cref="T:System.Uri"/> from.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when saving token data.</param>
            <returns>The generated <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.QueryStringUrlTokenUrlProvider`1.TokenFromUrl(System.Uri,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Parses a <see cref="T:System.Uri"/> into a <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to parse.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when loading token data.</param>
            <returns>The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> identified by the given <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.QueryStringUrlTokenUrlProvider`1.UrlFromToken(`0,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Generates a <see cref="T:System.Uri"/> from the given <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="token">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to generate the <see cref="T:System.Uri"/> from.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when saving token data.</param>
            <returns>The generated <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="P:Tasty.Web.UrlTokens.QueryStringUrlTokenUrlProvider`1.QueryStringKey">
            <summary>
            Gets or sets the key to use for the URL token in the query string.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.QueryStringUrlTokenUrlProvider`1.Url">
            <summary>
            Gets or sets the URL to use when generating a URL with a URL token.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.SqlServerUrlTokenStore">
            <summary>
            Implements <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to persist <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>s to SQL Server.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlServerUrlTokenStore.#ctor">
            <summary>
            Initializes a new instance of the SqlServerUrlTokenStore class.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlServerUrlTokenStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlServerUrlTokenStore class.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlServerUrlTokenStore.CleanExpiredUrlTokens">
            <summary>
            Cleans all expired token records from the store.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlServerUrlTokenStore.CreateUrlToken(Tasty.Web.UrlTokens.UrlTokenRecord)">
            <summary>
            Creates a new URL token record.
            </summary>
            <param name="record">The URL token record to create.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlServerUrlTokenStore.GetUrlToken(System.String)">
            <summary>
            Gets a URL token record.
            </summary>
            <param name="key">The key of the record to get.</param>
            <returns>The URL token record identified by the given key.</returns>
        </member>
        <member name="T:Tasty.Web.Uris">
            <summary>
            Providest extensions and helpers for URLs.
            </summary>
        </member>
        <member name="M:Tasty.Web.Uris.AddQueryValue(System.Uri,System.String,System.String)">
            <summary>
            Adds the given key/value to the given URL's query string.
            </summary>
            <param name="url">The URL to add the query string value to.</param>
            <param name="key">The query string key to add.</param>
            <param name="value">The query string value to add.</param>
            <returns>The updated URL.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.AppendPath(System.Uri,System.String)">
            <summary>
            Appens the given path to the URI's path.
            </summary>
            <param name="uri">The URI to append the path to.</param>
            <param name="path">The path to append.</param>
            <returns>A URI with the path appended.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.ClearQueryString(System.Uri)">
            <summary>
            Clears the given URI's query string.
            </summary>
            <param name="uri">The URI to clear the question string from.</param>
            <returns>The URI with its query string cleared.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.Combine(System.String,System.String)">
            <summary>
            Combines the two URL parts with a URL path separator.
            </summary>
            <param name="first">The first part to combine.</param>
            <param name="second">The second part to combine.</param>
            <returns>The combined URL.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.FileName(System.Uri)">
            <summary>
            Gets the file name part of the URI.
            </summary>
            <param name="uri">The URI to get the file name part of.</param>
            <returns>The file name part of the URI.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.QueryValue(System.Uri,System.String)">
            <summary>
            Gets the value of the given key in the given URL's query string.
            </summary>
            <param name="url">The URL to get the query string value from.</param>
            <param name="key">The query string key to get the value for.</param>
            <returns>The query string value.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.RemoveQueryValue(System.Uri,System.String)">
            <summary>
            Removes the given key from the given URL's query string.
            </summary>
            <param name="url">The URL to remove the query string key from.</param>
            <param name="key">The query string key to remove.</param>
            <returns>The updated URL.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.SetPath(System.Uri,System.String)">
            <summary>
            Sets the given path value for the given URL.
            </summary>
            <param name="url">The URL to set the path for.</param>
            <param name="path">The path to set.</param>
            <returns>The updated URL.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.SetQuery(System.Uri,System.String)">
            <summary>
            Sets the entire query string for the given URL.
            </summary>
            <param name="url">The URL to set the query string for.</param>
            <param name="query">The query string to set.</param>
            <returns>The updated URL.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.SetQuery(System.Uri,Tasty.Web.QueryString)">
            <summary>
            Sets the entire query string for the given URL.
            </summary>
            <param name="url">The URl to set the query string for.</param>
            <param name="query">The query string to set.</param>
            <returns>The updated URL.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.SetQueryValue(System.Uri,System.String,System.String)">
            <summary>
            Sets the given key/value for the given URL's query string.
            </summary>
            <param name="url">The URL to set the query string value for.</param>
            <param name="key">The query string key to set.</param>
            <param name="value">The query string value to set.</param>
            <returns>The updated URL.</returns>
        </member>
        <member name="T:Tasty.Web.MimeType">
            <summary>
            Represents a MIME type consisting of a content-type and a set of file extensions.
            </summary>
        </member>
        <member name="M:Tasty.Web.MimeType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MimeType class.
            </summary>
            <param name="contentType">The MIME type's content type.</param>
        </member>
        <member name="M:Tasty.Web.MimeType.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the MimeType class.
            </summary>
            <param name="contentType">The MIME type's content type.</param>
            <param name="extensions">The MIME type's valid extension set.</param>
        </member>
        <member name="M:Tasty.Web.MimeType.FromCommon(System.String)">
            <summary>
            Gets a common internet MIME type from the given path's file extension.
            </summary>
            <param name="path">The path of the file to get the common MIME type for.</param>
            <returns>A common MIME type, or "application/octet-stream" if the extension was not recognized.</returns>
        </member>
        <member name="M:Tasty.Web.MimeType.IsValidMimeType(System.Collections.Generic.IEnumerable{Tasty.Web.MimeType},System.String)">
            <summary>
            Gets a value indicating whether the given content type is
            a valid MIME type for the given whitelist.
            </summary>
            <param name="allowed">A collection of allowed MIME types to check.</param>
            <param name="contentType">The content type to check.</param>
            <returns>True if the MIME type is valid, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Web.MimeType.IsValidMimeType(System.Collections.Generic.IEnumerable{Tasty.Web.MimeType},System.String,System.String)">
            <summary>
            Gets a value indicating whether the given content type and file name constitute
            a valid MIME type for the given whitelist.
            </summary>
            <param name="allowed">A collection of allowed MIME types to check.</param>
            <param name="contentType">The content type to check.</param>
            <param name="fileName">The file name to check.</param>
            <returns>True if the MIME type is valid, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Web.MimeType.AddExtension(System.String)">
            <summary>
            Adds a new extension to this MIME type's valid extension set.
            </summary>
            <param name="extension">The extension to add.</param>
        </member>
        <member name="M:Tasty.Web.MimeType.AddExtensions(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a new collection of extensions to this MIME type's valid extension set.
            </summary>
            <param name="extensions">The set of extensions to add.</param>
        </member>
        <member name="M:Tasty.Web.MimeType.ContainsExtension(System.String)">
            <summary>
            Gets a value indicating whether the given extension is valid for this MIME type.
            </summary>
            <param name="extension">The extension to check.</param>
            <returns>True if the extension is valid, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Web.MimeType.GetNormalizedExtension(System.String)">
            <summary>
            Gets a normalized extension string (lowercase, beginning with a period).
            </summary>
            <param name="extension">The extension to normalize.</param>
            <returns>The normalized extension string.</returns>
        </member>
        <member name="P:Tasty.Web.MimeType.ContentType">
            <summary>
            Gets the MIME type's content type.
            </summary>
        </member>
        <member name="P:Tasty.Web.MimeType.Extensions">
            <summary>
            Gets the MIME type's valid extension set.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.UrlToken">
            <summary>
            Base <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> implementation.
            </summary>
        </member>
        <member name="F:Tasty.Web.UrlTokens.UrlToken.XmlNamespace">
            <summary>
            Gets the XML namespace used during token serialization.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlToken.GenerateKey">
            <summary>
            Generates a new unique key that can be used to identify the URL token.
            </summary>
            <returns>A unique token identifier.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlToken.Serialize">
            <summary>
            Serializes the URL token for storage.
            </summary>
            <returns>The serialized URL token data.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlToken.ToUrlTokenRecord">
            <summary>
            Creates a <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/> from this instance.
            </summary>
            <returns>A <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/> representing this instance.</returns>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlToken.Expires">
            <summary>
            Gets or sets a value indicating when the token expires, in UTC.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlToken.ExpiryHours">
            <summary>
            Gets the number of hours from creation the URL token expires in.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlToken.IsExpired">
            <summary>
            Gets a value indicating whether the token is expired.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.UrlTokenRecord">
            <summary>
            Represents a URL token record in persistent storage.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenRecord.#ctor">
            <summary>
            Initializes a new instance of the UrlTokenRecord class.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenRecord.#ctor(Tasty.Web.UrlTokens.UrlTokenRecord)">
            <summary>
            Initializes a new instance of the UrlTokenRecord class.
            </summary>
            <param name="record">The prototype <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/> to initialize this instance from.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenRecord.ToUrlToken">
            <summary>
            Converts this instance's <see cref="P:Tasty.Web.UrlTokens.UrlTokenRecord.TokenType"/> and <see cref="P:Tasty.Web.UrlTokens.UrlTokenRecord.Data"/> properties into an <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> object.
            </summary>
            <returns>An <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> object.</returns>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenRecord.Created">
            <summary>
            Gets or sets the date the token was created.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenRecord.Data">
            <summary>
            Gets or sets the serialized token data (i.e., from calling <see cref="M:Tasty.Web.UrlTokens.IUrlToken.Serialize"/>.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenRecord.Expires">
            <summary>
            Gets or sets the date the token expires.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenRecord.Key">
            <summary>
            Gets or sets the token's unique key.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenRecord.StorageTypeName">
            <summary>
            Gets the type name to use when storing this record in an <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/>.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenRecord.TokenType">
            <summary>
            Gets or sets <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> implementor that the token is persisted for.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.UrlTokenStore">
            <summary>
            Provides global persistence functionality and a way to access the <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/>
            currently in use.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenStore.CreateRecordCollection(System.Data.DataTable)">
            <summary>
            Gets the given result set as a collection of <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/>s.
            Assumes the result set has the expected schema definition.
            </summary>
            <param name="resultSet">The result set to convert into a collection of <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/>s.</param>
            <returns>A collection of <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/>s.</returns>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenStore.Current">
            <summary>
            Gets or sets the current <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> implementation in use.
            The setter on this property is primarily meant for testing purposes.
            </summary>
        </member>
        <member name="T:Tasty.Spreadsheets.XlsxDocument">
            <summary>
            Creates Excel documents.
            This class was generated using the Open XML SDK v2.0 Tools.
            </summary>
        </member>
        <member name="M:Tasty.Spreadsheets.XlsxDocument.CreatePackage(System.String)">
            <summary>
            Creates a new spreadsheet document packaage at the given path.
            </summary>
            <param name="filePath">The path to create the document package at.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.XlsxDocument.CreateParts(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Creates the document parts fro the given document.
            </summary>
            <param name="document">The document to create parts for.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.XlsxDocument.GenerateExtendedFilePropertiesPart1Content(DocumentFormat.OpenXml.Packaging.ExtendedFilePropertiesPart)">
            <summary>
            Generates content of extendedFilePropertiesPart1.
            </summary>
            <param name="extendedFilePropertiesPart1">The part to generate content for.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.XlsxDocument.GenerateWorkbookPart1Content(DocumentFormat.OpenXml.Packaging.WorkbookPart)">
            <summary>
            Generates content of workbookPart1.
            </summary>
            <param name="workbookPart1">The part to generate content for.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.XlsxDocument.GenerateWorkbookStylesPart1Content(DocumentFormat.OpenXml.Packaging.WorkbookStylesPart)">
            <summary>
            Generates content of workbookStylesPart1.
            </summary>
            <param name="workbookStylesPart1">The part to generate content for.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.XlsxDocument.GenerateThemePart1Content(DocumentFormat.OpenXml.Packaging.ThemePart)">
            <summary>
            Generates content of themePart1.
            </summary>
            <param name="themePart1">The part to generate content for.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.XlsxDocument.SetPackageProperties(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)">
            <summary>
            Sets the package properties on the given document.
            </summary>
            <param name="document">The document to set package properties for.</param>
        </member>
        <member name="T:Tasty.Spreadsheets.XlsxWriter">
            <summary>
            Implements <see cref="T:Tasty.Spreadsheets.ISpreadsheetWriter"/> to write Excel spreadsheets.
            </summary>
        </member>
        <member name="M:Tasty.Spreadsheets.XlsxWriter.Write(Tasty.Spreadsheets.ISpreadsheetDataSet,System.String)">
            <summary>
            Writes the given <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to a spreadsheet file at the given path.
            The path's extension will be replaced by the value of this instance's <see cref="P:Tasty.Spreadsheets.XlsxWriter.Extension"/> property.
            </summary>
            <param name="dataSet">The <see cref="T:Tasty.Spreadsheets.ISpreadsheetDataSet"/> to write.</param>
            <param name="path">The path to write to.</param>
        </member>
        <member name="M:Tasty.Spreadsheets.XlsxWriter.AddWorksheet(DocumentFormat.OpenXml.Packaging.WorkbookPart,DocumentFormat.OpenXml.Spreadsheet.Sheets,System.String)">
            <summary>
            Adds a new worksheet to the given workbook.
            </summary>
            <param name="workbookPart">The <see cref="T:DocumentFormat.OpenXml.Packaging.WorkbookPart"/> to add the worksheet to.</param>
            <param name="sheets">The workbook's <see cref="T:DocumentFormat.OpenXml.Spreadsheet.Sheets"/> collection to add a sheet reference to.</param>
            <param name="sheetName">The name of the sheet to add.</param>
            <returns>The created <see cref="T:DocumentFormat.OpenXml.Packaging.WorksheetPart"/>.</returns>
        </member>
        <member name="M:Tasty.Spreadsheets.XlsxWriter.CreateCell(Tasty.Spreadsheets.ISpreadsheetDataTable,Tasty.Spreadsheets.ISpreadsheetDataRow,System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new cell for the given data table, row and column index.
            </summary>
            <param name="table">The data table to create the cell for.</param>
            <param name="row">The data row to create the cell for.</param>
            <param name="rowNumber">The row number to name the cell with.</param>
            <param name="columnIndex">The column index to create the cell for.</param>
            <param name="dateStyleIndex">The index of the date format style in the workbook's stylesheet.</param>
            <param name="timeStyleIndex">The index of the time format style in the workbook's stylesheet.</param>
            <returns>The created cell.</returns>
        </member>
        <member name="M:Tasty.Spreadsheets.XlsxWriter.NormalizeSheetName(System.String,System.UInt32)">
            <summary>
            Normalizes the given sheet name to a valid name.
            </summary>
            <param name="sheetName">The name of the sheet to normalize.</param>
            <param name="sheetId">The sheet ID.</param>
            <returns>The normalized sheet name.</returns>
        </member>
        <member name="P:Tasty.Spreadsheets.XlsxWriter.Name">
            <summary>
            Gets the display name of this <see cref="T:Tasty.Spreadsheets.ISpreadsheetWriter"/> implementation.
            </summary>
        </member>
        <member name="P:Tasty.Spreadsheets.XlsxWriter.Extension">
            <summary>
            Gets the file extension to use when saving files.
            </summary>
        </member>
    </members>
</doc>
