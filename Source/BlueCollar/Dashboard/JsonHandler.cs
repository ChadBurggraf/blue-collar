//-----------------------------------------------------------------------
// <copyright file="JsonHandler.cs" company="Tasty Codes">
//     Copyright (c) 2011 Chad Burggraf.
// </copyright>
//-----------------------------------------------------------------------

namespace BlueCollar.Dashboard
{
    using System;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Implements <see cref="IDashboardHandler"/> for JSON requests.
    /// </summary>
    public abstract class JsonHandler : DashboardHandlerBase
    {
        private static readonly JsonConverter[] converters = new JsonConverter[] 
        {
            new StringEnumConverter()
        };

        /// <summary>
        /// Initializes a new instance of the JsonHandler class.
        /// </summary>
        /// <param name="repositoryFactory">The repository factory to use.</param>
        protected JsonHandler(IRepositoryFactory repositoryFactory)
            : base(repositoryFactory)
        {
        }

        /// <summary>
        /// Gets the cache modes available for responses generated by this instance.
        /// </summary>
        protected override ResponseCacheModes CacheModes
        {
            get { return ResponseCacheModes.None; }
        }

        /// <summary>
        /// Gets the JSON representation of the given object as an array of bytes.
        /// </summary>
        /// <param name="value">The object to get the JSON representation of.</param>
        /// <returns>An array of bytes representing the object as JSON.</returns>
        protected static byte[] Json(object value)
        {
            string json = string.Empty;

            if (value != null)
            {
                json = JsonConvert.SerializeObject(value, Formatting.None, converters);
            }

            return EncodeString(json);
        }
    }
}
