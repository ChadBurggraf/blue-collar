//-----------------------------------------------------------------------
// <copyright file="IndexHandler.cs" company="Tasty Codes">
//     Copyright (c) 2011 Chad Burggraf.
// </copyright>
//-----------------------------------------------------------------------

namespace BlueCollar.Dashboard
{
    using System;
    using System.Web;

    /// <summary>
    /// Extens <see cref="StaticFileHandler"/> to handle requests for the index page.
    /// </summary>
    public sealed class IndexHandler : StaticFileHandler
    {
        /// <summary>
        /// Initializes a new instance of the IndexHandler class.
        /// </summary>
        /// <param name="repositoryFactory">The repository factory to use.</param>
        public IndexHandler(IRepositoryFactory repositoryFactory)
            : base(repositoryFactory)
        {
        }

        /// <summary>
        /// Gets the cache modes available for responses generated by this instance.
        /// </summary>
        protected override ResponseCacheModes CacheModes
        {
            get { return ResponseCacheModes.None; }
        }

        /// <summary>
        /// Gets the name of the requested static file.
        /// </summary>
        protected override string RequestedFileName
        {
            get { return "index.xslt"; }
        }

        /// <summary>
        /// Gets the content type of the response this handler generates.
        /// </summary>
        protected override string ResponseContentType
        {
            get { return "text/html"; }
        }

        /// <summary>
        /// Performs the concrete request operation and returns the output as a byte array.
        /// </summary>
        /// <param name="context">The HTTP context to perform the request for.</param>
        /// <param name="file">The static file to return the contents of.</param>
        /// <returns>The response to write.</returns>
        protected override byte[] PerformRequest(HttpContextBase context, StaticFile file)
        {
            DateTime now = DateTime.UtcNow.FloorWithSeconds();
            DateTime distant = now.AddDays(-14);
            DateTime recent = now.AddDays(-1);

            return EncodeString(new Index(file, Repository.GetStatistics(ApplicationName, recent, distant, now, null)).Transform());
        }

        /// <summary>
        /// Prepares an HTTP context's response.
        /// </summary>
        /// <param name="context">The HTTP context to prepare.</param>
        /// <param name="output">The cached output the response is being prepared for, if applicable.</param>
        protected override void PrepareResponse(HttpContextBase context, HandlerOutput output)
        {
            if (context == null)
            {
                throw new ArgumentNullException("context", "context cannot be null.");
            }

            base.PrepareResponse(context, output);

            if (context.Response.StatusCode == 200)
            {
                context.Response.Charset = "utf-8";
            }
        }
    }
}
