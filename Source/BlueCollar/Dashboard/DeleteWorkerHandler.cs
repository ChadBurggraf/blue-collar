//-----------------------------------------------------------------------
// <copyright file="DeleteWorkerHandler.cs" company="Tasty Codes">
//     Copyright (c) 2011 Chad Burggraf.
// </copyright>
//-----------------------------------------------------------------------

namespace BlueCollar.Dashboard
{
    using System;
    using System.Data;
    using System.Web;

    /// <summary>
    /// Implements <see cref="IDashboardHandler"/> to delete a worker.
    /// </summary>
    public sealed class DeleteWorkerHandler : DashboardHandlerBase
    {
        private long? id;

        /// <summary>
        /// Initializes a new instance of the DeleteWorkerHandler class.
        /// </summary>
        /// <param name="repositoryFactory">The repository factory to use.</param>
        public DeleteWorkerHandler(IRepositoryFactory repositoryFactory)
            : base(repositoryFactory)
        {
        }

        /// <summary>
        /// Gets the ID of the resource requesting to be deleted.
        /// </summary>
        public long Id
        {
            get
            {
                if (this.id == null)
                {
                    this.id = Helper.RouteIntValue(0) ?? 0;
                }

                return this.id.Value;
            }
        }

        /// <summary>
        /// Gets the cache modes available for responses generated by this instance.
        /// </summary>
        protected override ResponseCacheModes CacheModes
        {
            get { return ResponseCacheModes.None; }
        }

        /// <summary>
        /// Performs the concrete request operation and returns the output
        /// as a byte array.
        /// </summary>
        /// <param name="context">The HTTP context to perform the request for.</param>
        /// <returns>The response to write.</returns>
        protected override byte[] PerformRequest(HttpContextBase context)
        {
            if (this.Id > 0)
            {
                bool workerAcquired = false, workingAcquired = false;

                try
                {
                    if (workerAcquired = AcquireWorkerLock(this.Id))
                    {
                        foreach (WorkingRecord working in this.Repository.GetWorkingForWorker(this.Id, null, null))
                        {
                            try
                            {
                                if (workingAcquired = AcquireWorkingLock(working.Id.Value))
                                {
                                    HistoryRecord history = Worker.CreateHistory(working, HistoryStatus.Interrupted);
                                    this.Repository.DeleteWorking(working.Id.Value, null);
                                    this.Repository.CreateHistory(history, null);
                                    workingAcquired = false;
                                }
                                else
                                {
                                    InternalServerError();
                                }
                            }
                            finally
                            {
                                if (workingAcquired)
                                {
                                    Repository.ReleaseWorkingLock(working.Id.Value, null);
                                    workingAcquired = false;
                                }
                            }
                        }

                        Repository.DeleteWorker(this.Id, null);
                    }
                    else
                    {
                        InternalServerError();
                    }
                }
                finally
                {
                    if (workerAcquired)
                    {
                        Repository.ReleaseWorkerLock(this.Id, null);
                    }
                }
            }
            else
            {
                BadRequest();
            }

            return null;
        }
    }
}